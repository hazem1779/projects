
RCC_CLOCK_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a40  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08002c10  08002c10  00012c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ca0  08002ca0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002ca0  08002ca0  00012ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ca8  08002ca8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ca8  08002ca8  00012ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cac  08002cac  00012cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002cb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000070  08002d20  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08002d20  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000082ce  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001485  00000000  00000000  0002836e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000650  00000000  00000000  000297f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005c8  00000000  00000000  00029e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021196  00000000  00000000  0002a410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008dc3  00000000  00000000  0004b5a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8383  00000000  00000000  00054369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011c6ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c88  00000000  00000000  0011c73c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002bf8 	.word	0x08002bf8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08002bf8 	.word	0x08002bf8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <SysTick_Handler>:
#include "stm32f4xx_hal.h"



void SysTick_Handler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005c8:	f000 fa02 	bl	80009d0 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80005cc:	f000 fb31 	bl	8000c32 <HAL_SYSTICK_IRQHandler>
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <main>:

void SystemClock_Config(void);


int main()
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b09a      	sub	sp, #104	; 0x68
 80005d8:	af00      	add	r7, sp, #0
	HAL_Init();
 80005da:	f000 f9a7 	bl	800092c <HAL_Init>

	SystemClock_Config();
 80005de:	f000 f88b 	bl	80006f8 <SystemClock_Config>

	UART2_init();
 80005e2:	f000 f85f 	bl	80006a4 <UART2_init>

	char buffer[100];

	/*print the SYSCLCK*/
	sprintf(buffer, "SYSCLCK =%ld HZ\r\n",HAL_RCC_GetSysClockFreq());
 80005e6:	f000 fddf 	bl	80011a8 <HAL_RCC_GetSysClockFreq>
 80005ea:	4602      	mov	r2, r0
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	4926      	ldr	r1, [pc, #152]	; (8000688 <main+0xb4>)
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 fe93 	bl	800231c <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer,strlen(buffer),HAL_MAX_DELAY);
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff fe09 	bl	8000210 <strlen>
 80005fe:	4603      	mov	r3, r0
 8000600:	b29a      	uxth	r2, r3
 8000602:	1d39      	adds	r1, r7, #4
 8000604:	f04f 33ff 	mov.w	r3, #4294967295
 8000608:	4820      	ldr	r0, [pc, #128]	; (800068c <main+0xb8>)
 800060a:	f001 fae8 	bl	8001bde <HAL_UART_Transmit>

	/*print the HCLK*/
	sprintf(buffer, "HCLK  =%ld HZ\r\n",HAL_RCC_GetHCLKFreq());
 800060e:	f000 fd97 	bl	8001140 <HAL_RCC_GetHCLKFreq>
 8000612:	4602      	mov	r2, r0
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	491e      	ldr	r1, [pc, #120]	; (8000690 <main+0xbc>)
 8000618:	4618      	mov	r0, r3
 800061a:	f001 fe7f 	bl	800231c <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer,strlen(buffer),HAL_MAX_DELAY);
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff fdf5 	bl	8000210 <strlen>
 8000626:	4603      	mov	r3, r0
 8000628:	b29a      	uxth	r2, r3
 800062a:	1d39      	adds	r1, r7, #4
 800062c:	f04f 33ff 	mov.w	r3, #4294967295
 8000630:	4816      	ldr	r0, [pc, #88]	; (800068c <main+0xb8>)
 8000632:	f001 fad4 	bl	8001bde <HAL_UART_Transmit>

	/*print the P1CLK*/
	sprintf(buffer, "P1CLK =%ld HZ\r\n",HAL_RCC_GetPCLK1Freq());
 8000636:	f000 fd8f 	bl	8001158 <HAL_RCC_GetPCLK1Freq>
 800063a:	4602      	mov	r2, r0
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	4915      	ldr	r1, [pc, #84]	; (8000694 <main+0xc0>)
 8000640:	4618      	mov	r0, r3
 8000642:	f001 fe6b 	bl	800231c <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer,strlen(buffer),HAL_MAX_DELAY);
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff fde1 	bl	8000210 <strlen>
 800064e:	4603      	mov	r3, r0
 8000650:	b29a      	uxth	r2, r3
 8000652:	1d39      	adds	r1, r7, #4
 8000654:	f04f 33ff 	mov.w	r3, #4294967295
 8000658:	480c      	ldr	r0, [pc, #48]	; (800068c <main+0xb8>)
 800065a:	f001 fac0 	bl	8001bde <HAL_UART_Transmit>

	/*print the P2CLK*/
	sprintf(buffer, "P2CLK =%ld HZ\r\n",HAL_RCC_GetPCLK2Freq());
 800065e:	f000 fd8f 	bl	8001180 <HAL_RCC_GetPCLK2Freq>
 8000662:	4602      	mov	r2, r0
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	490c      	ldr	r1, [pc, #48]	; (8000698 <main+0xc4>)
 8000668:	4618      	mov	r0, r3
 800066a:	f001 fe57 	bl	800231c <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer,strlen(buffer),HAL_MAX_DELAY);
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff fdcd 	bl	8000210 <strlen>
 8000676:	4603      	mov	r3, r0
 8000678:	b29a      	uxth	r2, r3
 800067a:	1d39      	adds	r1, r7, #4
 800067c:	f04f 33ff 	mov.w	r3, #4294967295
 8000680:	4802      	ldr	r0, [pc, #8]	; (800068c <main+0xb8>)
 8000682:	f001 faac 	bl	8001bde <HAL_UART_Transmit>


	while(1);
 8000686:	e7fe      	b.n	8000686 <main+0xb2>
 8000688:	08002c10 	.word	0x08002c10
 800068c:	2000008c 	.word	0x2000008c
 8000690:	08002c24 	.word	0x08002c24
 8000694:	08002c34 	.word	0x08002c34
 8000698:	08002c44 	.word	0x08002c44

0800069c <error_handler>:
	return 0;
}


void error_handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
	while(1);
 80006a0:	e7fe      	b.n	80006a0 <error_handler+0x4>
	...

080006a4 <UART2_init>:
}

void UART2_init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	huart2.Instance 		= USART2;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <UART2_init+0x4c>)
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <UART2_init+0x50>)
 80006ac:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate 	= 115200;
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <UART2_init+0x4c>)
 80006b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength 	= UART_WORDLENGTH_8B;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <UART2_init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
	huart2.Init.HwFlowCtl 	= UART_HWCONTROL_NONE;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <UART2_init+0x4c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode		= UART_MODE_TX_RX;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <UART2_init+0x4c>)
 80006c4:	220c      	movs	r2, #12
 80006c6:	615a      	str	r2, [r3, #20]
	huart2.Init.OverSampling= UART_OVERSAMPLING_16;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <UART2_init+0x4c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
	huart2.Init.StopBits	= UART_STOPBITS_1;
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <UART2_init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity		= UART_PARITY_NONE;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <UART2_init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]



	if (HAL_UART_Init(&huart2) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <UART2_init+0x4c>)
 80006dc:	f001 fa32 	bl	8001b44 <HAL_UART_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <UART2_init+0x46>
	{
		error_handler();
 80006e6:	f7ff ffd9 	bl	800069c <error_handler>
	}

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	2000008c 	.word	0x2000008c
 80006f4:	40004400 	.word	0x40004400

080006f8 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fc:	4b19      	ldr	r3, [pc, #100]	; (8000764 <SystemClock_Config+0x6c>)
 80006fe:	2202      	movs	r2, #2
 8000700:	601a      	str	r2, [r3, #0]
	osc_init.HSEState		= RCC_HSE_OFF;
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <SystemClock_Config+0x6c>)
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
	osc_init.HSIState		= RCC_HSI_ON;
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <SystemClock_Config+0x6c>)
 800070a:	2201      	movs	r2, #1
 800070c:	60da      	str	r2, [r3, #12]
	osc_init.LSEState		= RCC_LSE_OFF;
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <SystemClock_Config+0x6c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
	osc_init.LSIState		= RCC_LSI_OFF;
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <SystemClock_Config+0x6c>)
 8000716:	2200      	movs	r2, #0
 8000718:	615a      	str	r2, [r3, #20]
	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 800071a:	4812      	ldr	r0, [pc, #72]	; (8000764 <SystemClock_Config+0x6c>)
 800071c:	f000 ff74 	bl	8001608 <HAL_RCC_OscConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x32>
	{
		error_handler();
 8000726:	f7ff ffb9 	bl	800069c <error_handler>
	}

	clk_init.ClockType	   	= (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <SystemClock_Config+0x70>)
 800072c:	220f      	movs	r2, #15
 800072e:	601a      	str	r2, [r3, #0]
	clk_init.SYSCLKSource  	= RCC_SYSCLKSOURCE_HSI;
 8000730:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <SystemClock_Config+0x70>)
 8000732:	2200      	movs	r2, #0
 8000734:	605a      	str	r2, [r3, #4]
	clk_init.AHBCLKDivider 	= RCC_SYSCLK_DIV1;
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <SystemClock_Config+0x70>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
	clk_init.APB1CLKDivider	= RCC_HCLK_DIV2;
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <SystemClock_Config+0x70>)
 800073e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000742:	60da      	str	r2, [r3, #12]
	clk_init.APB2CLKDivider	= RCC_HCLK_DIV2;
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <SystemClock_Config+0x70>)
 8000746:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800074a:	611a      	str	r2, [r3, #16]

	if(HAL_RCC_ClockConfig(&clk_init, FLASH_ACR_LATENCY_0WS)!= HAL_OK)
 800074c:	2100      	movs	r1, #0
 800074e:	4806      	ldr	r0, [pc, #24]	; (8000768 <SystemClock_Config+0x70>)
 8000750:	f000 fc10 	bl	8000f74 <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x66>
	{
		error_handler();
 800075a:	f7ff ff9f 	bl	800069c <error_handler>
	}
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200000d0 	.word	0x200000d0
 8000768:	20000104 	.word	0x20000104

0800076c <HAL_MspInit>:

#define AF7_USART2  	0x07U

GPIO_InitTypeDef GPIOA_H;
void HAL_MspInit(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	//1. Set the priority grouping.
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000770:	2003      	movs	r0, #3
 8000772:	f000 fa1d 	bl	8000bb0 <HAL_NVIC_SetPriorityGrouping>
	//2. Enable required system exceptions.
	SCB->SHCSR |= (1 << 16 | 1 << 17 | 1 << 18); //enable MEMFAULT BUSFAULT USGFAULT
 8000776:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <HAL_MspInit+0x40>)
 8000778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077a:	4a0c      	ldr	r2, [pc, #48]	; (80007ac <HAL_MspInit+0x40>)
 800077c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000780:	6253      	str	r3, [r2, #36]	; 0x24
	//3. Configure the priority for system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	f06f 000b 	mvn.w	r0, #11
 800078a:	f000 fa1c 	bl	8000bc6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	f06f 000b 	mvn.w	r0, #11
 8000796:	f000 fa16 	bl	8000bc6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	f06f 000a 	mvn.w	r0, #10
 80007a2:	f000 fa10 	bl	8000bc6 <HAL_NVIC_SetPriority>

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <HAL_UART_MspInit>:
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	//1. enable clock for USART2
	__HAL_RCC_USART2_CLK_ENABLE();
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	4b1f      	ldr	r3, [pc, #124]	; (800083c <HAL_UART_MspInit+0x8c>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c0:	4a1e      	ldr	r2, [pc, #120]	; (800083c <HAL_UART_MspInit+0x8c>)
 80007c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c6:	6413      	str	r3, [r2, #64]	; 0x40
 80007c8:	4b1c      	ldr	r3, [pc, #112]	; (800083c <HAL_UART_MspInit+0x8c>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]

	//2.   configure the GPIO peripheral

	//2.1. configure the clock for the corresponding GPIO peripheral
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	4b18      	ldr	r3, [pc, #96]	; (800083c <HAL_UART_MspInit+0x8c>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007dc:	4a17      	ldr	r2, [pc, #92]	; (800083c <HAL_UART_MspInit+0x8c>)
 80007de:	f043 0301 	orr.w	r3, r3, #1
 80007e2:	6313      	str	r3, [r2, #48]	; 0x30
 80007e4:	4b15      	ldr	r3, [pc, #84]	; (800083c <HAL_UART_MspInit+0x8c>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]

	//2.2. configure pins USART2_Tx and USART2_Rx

	//USART2_TX
	GPIOA_H.Pin 	= GPIO_PIN_2;
 80007f0:	4b13      	ldr	r3, [pc, #76]	; (8000840 <HAL_UART_MspInit+0x90>)
 80007f2:	2204      	movs	r2, #4
 80007f4:	601a      	str	r2, [r3, #0]
	GPIOA_H.Mode	= GPIO_MODE_AF_PP;
 80007f6:	4b12      	ldr	r3, [pc, #72]	; (8000840 <HAL_UART_MspInit+0x90>)
 80007f8:	2202      	movs	r2, #2
 80007fa:	605a      	str	r2, [r3, #4]
	GPIOA_H.Speed	= GPIO_SPEED_FREQ_LOW;
 80007fc:	4b10      	ldr	r3, [pc, #64]	; (8000840 <HAL_UART_MspInit+0x90>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
	GPIOA_H.Pull	= GPIO_PULLUP;
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <HAL_UART_MspInit+0x90>)
 8000804:	2201      	movs	r2, #1
 8000806:	609a      	str	r2, [r3, #8]
	GPIOA_H.Alternate = AF7_USART2;
 8000808:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <HAL_UART_MspInit+0x90>)
 800080a:	2207      	movs	r2, #7
 800080c:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOA,&GPIOA_H);
 800080e:	490c      	ldr	r1, [pc, #48]	; (8000840 <HAL_UART_MspInit+0x90>)
 8000810:	480c      	ldr	r0, [pc, #48]	; (8000844 <HAL_UART_MspInit+0x94>)
 8000812:	f000 fa1b 	bl	8000c4c <HAL_GPIO_Init>

	//USART2_RX
	GPIOA_H.Pin 	= GPIO_PIN_3;
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <HAL_UART_MspInit+0x90>)
 8000818:	2208      	movs	r2, #8
 800081a:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOA,&GPIOA_H);
 800081c:	4908      	ldr	r1, [pc, #32]	; (8000840 <HAL_UART_MspInit+0x90>)
 800081e:	4809      	ldr	r0, [pc, #36]	; (8000844 <HAL_UART_MspInit+0x94>)
 8000820:	f000 fa14 	bl	8000c4c <HAL_GPIO_Init>

	//3. NVIC settings
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000824:	2026      	movs	r0, #38	; 0x26
 8000826:	f000 f9ea 	bl	8000bfe <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 800082a:	2200      	movs	r2, #0
 800082c:	210f      	movs	r1, #15
 800082e:	2026      	movs	r0, #38	; 0x26
 8000830:	f000 f9c9 	bl	8000bc6 <HAL_NVIC_SetPriority>

}
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40023800 	.word	0x40023800
 8000840:	20000118 	.word	0x20000118
 8000844:	40020000 	.word	0x40020000

08000848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000850:	4a14      	ldr	r2, [pc, #80]	; (80008a4 <_sbrk+0x5c>)
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <_sbrk+0x60>)
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800085c:	4b13      	ldr	r3, [pc, #76]	; (80008ac <_sbrk+0x64>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d102      	bne.n	800086a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <_sbrk+0x64>)
 8000866:	4a12      	ldr	r2, [pc, #72]	; (80008b0 <_sbrk+0x68>)
 8000868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <_sbrk+0x64>)
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4413      	add	r3, r2
 8000872:	693a      	ldr	r2, [r7, #16]
 8000874:	429a      	cmp	r2, r3
 8000876:	d207      	bcs.n	8000888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000878:	f001 fd26 	bl	80022c8 <__errno>
 800087c:	4603      	mov	r3, r0
 800087e:	220c      	movs	r2, #12
 8000880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000882:	f04f 33ff 	mov.w	r3, #4294967295
 8000886:	e009      	b.n	800089c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000888:	4b08      	ldr	r3, [pc, #32]	; (80008ac <_sbrk+0x64>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800088e:	4b07      	ldr	r3, [pc, #28]	; (80008ac <_sbrk+0x64>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	4a05      	ldr	r2, [pc, #20]	; (80008ac <_sbrk+0x64>)
 8000898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800089a:	68fb      	ldr	r3, [r7, #12]
}
 800089c:	4618      	mov	r0, r3
 800089e:	3718      	adds	r7, #24
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20020000 	.word	0x20020000
 80008a8:	00000400 	.word	0x00000400
 80008ac:	2000012c 	.word	0x2000012c
 80008b0:	20000148 	.word	0x20000148

080008b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <SystemInit+0x20>)
 80008ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008be:	4a05      	ldr	r2, [pc, #20]	; (80008d4 <SystemInit+0x20>)
 80008c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000910 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008dc:	480d      	ldr	r0, [pc, #52]	; (8000914 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008de:	490e      	ldr	r1, [pc, #56]	; (8000918 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008e0:	4a0e      	ldr	r2, [pc, #56]	; (800091c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e4:	e002      	b.n	80008ec <LoopCopyDataInit>

080008e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ea:	3304      	adds	r3, #4

080008ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f0:	d3f9      	bcc.n	80008e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f2:	4a0b      	ldr	r2, [pc, #44]	; (8000920 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008f4:	4c0b      	ldr	r4, [pc, #44]	; (8000924 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f8:	e001      	b.n	80008fe <LoopFillZerobss>

080008fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008fc:	3204      	adds	r2, #4

080008fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000900:	d3fb      	bcc.n	80008fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000902:	f7ff ffd7 	bl	80008b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000906:	f001 fce5 	bl	80022d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800090a:	f7ff fe63 	bl	80005d4 <main>
  bx  lr    
 800090e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000910:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000918:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800091c:	08002cb0 	.word	0x08002cb0
  ldr r2, =_sbss
 8000920:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000924:	20000144 	.word	0x20000144

08000928 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000928:	e7fe      	b.n	8000928 <ADC_IRQHandler>
	...

0800092c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000930:	4b0e      	ldr	r3, [pc, #56]	; (800096c <HAL_Init+0x40>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a0d      	ldr	r2, [pc, #52]	; (800096c <HAL_Init+0x40>)
 8000936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800093a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800093c:	4b0b      	ldr	r3, [pc, #44]	; (800096c <HAL_Init+0x40>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a0a      	ldr	r2, [pc, #40]	; (800096c <HAL_Init+0x40>)
 8000942:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000946:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <HAL_Init+0x40>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a07      	ldr	r2, [pc, #28]	; (800096c <HAL_Init+0x40>)
 800094e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000952:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000954:	2003      	movs	r0, #3
 8000956:	f000 f92b 	bl	8000bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095a:	2000      	movs	r0, #0
 800095c:	f000 f808 	bl	8000970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000960:	f7ff ff04 	bl	800076c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40023c00 	.word	0x40023c00

08000970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <HAL_InitTick+0x54>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_InitTick+0x58>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	4619      	mov	r1, r3
 8000982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000986:	fbb3 f3f1 	udiv	r3, r3, r1
 800098a:	fbb2 f3f3 	udiv	r3, r2, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f000 f943 	bl	8000c1a <HAL_SYSTICK_Config>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	e00e      	b.n	80009bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2b0f      	cmp	r3, #15
 80009a2:	d80a      	bhi.n	80009ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a4:	2200      	movs	r2, #0
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	f000 f90b 	bl	8000bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b0:	4a06      	ldr	r2, [pc, #24]	; (80009cc <HAL_InitTick+0x5c>)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009b6:	2300      	movs	r3, #0
 80009b8:	e000      	b.n	80009bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000000 	.word	0x20000000
 80009c8:	20000008 	.word	0x20000008
 80009cc:	20000004 	.word	0x20000004

080009d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_IncTick+0x20>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_IncTick+0x24>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4413      	add	r3, r2
 80009e0:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <HAL_IncTick+0x24>)
 80009e2:	6013      	str	r3, [r2, #0]
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000130 	.word	0x20000130

080009f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return uwTick;
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <HAL_GetTick+0x14>)
 80009fe:	681b      	ldr	r3, [r3, #0]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000130 	.word	0x20000130

08000a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a42:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	60d3      	str	r3, [r2, #12]
}
 8000a48:	bf00      	nop
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a5c:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <__NVIC_GetPriorityGrouping+0x18>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	0a1b      	lsrs	r3, r3, #8
 8000a62:	f003 0307 	and.w	r3, r3, #7
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	db0b      	blt.n	8000a9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	f003 021f 	and.w	r2, r3, #31
 8000a8c:	4907      	ldr	r1, [pc, #28]	; (8000aac <__NVIC_EnableIRQ+0x38>)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	095b      	lsrs	r3, r3, #5
 8000a94:	2001      	movs	r0, #1
 8000a96:	fa00 f202 	lsl.w	r2, r0, r2
 8000a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000e100 	.word	0xe000e100

08000ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	6039      	str	r1, [r7, #0]
 8000aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	db0a      	blt.n	8000ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	490c      	ldr	r1, [pc, #48]	; (8000afc <__NVIC_SetPriority+0x4c>)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	0112      	lsls	r2, r2, #4
 8000ad0:	b2d2      	uxtb	r2, r2
 8000ad2:	440b      	add	r3, r1
 8000ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad8:	e00a      	b.n	8000af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4908      	ldr	r1, [pc, #32]	; (8000b00 <__NVIC_SetPriority+0x50>)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	3b04      	subs	r3, #4
 8000ae8:	0112      	lsls	r2, r2, #4
 8000aea:	b2d2      	uxtb	r2, r2
 8000aec:	440b      	add	r3, r1
 8000aee:	761a      	strb	r2, [r3, #24]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000e100 	.word	0xe000e100
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b089      	sub	sp, #36	; 0x24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	f1c3 0307 	rsb	r3, r3, #7
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	bf28      	it	cs
 8000b22:	2304      	movcs	r3, #4
 8000b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	2b06      	cmp	r3, #6
 8000b2c:	d902      	bls.n	8000b34 <NVIC_EncodePriority+0x30>
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3b03      	subs	r3, #3
 8000b32:	e000      	b.n	8000b36 <NVIC_EncodePriority+0x32>
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	f04f 32ff 	mov.w	r2, #4294967295
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43da      	mvns	r2, r3
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	401a      	ands	r2, r3
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	fa01 f303 	lsl.w	r3, r1, r3
 8000b56:	43d9      	mvns	r1, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	4313      	orrs	r3, r2
         );
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3724      	adds	r7, #36	; 0x24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
	...

08000b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b7c:	d301      	bcc.n	8000b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e00f      	b.n	8000ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b82:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <SysTick_Config+0x40>)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b8a:	210f      	movs	r1, #15
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	f7ff ff8e 	bl	8000ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <SysTick_Config+0x40>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b9a:	4b04      	ldr	r3, [pc, #16]	; (8000bac <SysTick_Config+0x40>)
 8000b9c:	2207      	movs	r2, #7
 8000b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	e000e010 	.word	0xe000e010

08000bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ff29 	bl	8000a10 <__NVIC_SetPriorityGrouping>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b086      	sub	sp, #24
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	607a      	str	r2, [r7, #4]
 8000bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd8:	f7ff ff3e 	bl	8000a58 <__NVIC_GetPriorityGrouping>
 8000bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	68b9      	ldr	r1, [r7, #8]
 8000be2:	6978      	ldr	r0, [r7, #20]
 8000be4:	f7ff ff8e 	bl	8000b04 <NVIC_EncodePriority>
 8000be8:	4602      	mov	r2, r0
 8000bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bee:	4611      	mov	r1, r2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff5d 	bl	8000ab0 <__NVIC_SetPriority>
}
 8000bf6:	bf00      	nop
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4603      	mov	r3, r0
 8000c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ff31 	bl	8000a74 <__NVIC_EnableIRQ>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f7ff ffa2 	bl	8000b6c <SysTick_Config>
 8000c28:	4603      	mov	r3, r0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000c36:	f000 f802 	bl	8000c3e <HAL_SYSTICK_Callback>
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	; 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
 8000c66:	e165      	b.n	8000f34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c68:	2201      	movs	r2, #1
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	697a      	ldr	r2, [r7, #20]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f040 8154 	bne.w	8000f2e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f003 0303 	and.w	r3, r3, #3
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d005      	beq.n	8000c9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d130      	bne.n	8000d00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	2203      	movs	r2, #3
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	68da      	ldr	r2, [r3, #12]
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	091b      	lsrs	r3, r3, #4
 8000cea:	f003 0201 	and.w	r2, r3, #1
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f003 0303 	and.w	r3, r3, #3
 8000d08:	2b03      	cmp	r3, #3
 8000d0a:	d017      	beq.n	8000d3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	2203      	movs	r2, #3
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	4013      	ands	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 0303 	and.w	r3, r3, #3
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d123      	bne.n	8000d90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	08da      	lsrs	r2, r3, #3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3208      	adds	r2, #8
 8000d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	f003 0307 	and.w	r3, r3, #7
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	220f      	movs	r2, #15
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	691a      	ldr	r2, [r3, #16]
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	08da      	lsrs	r2, r3, #3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3208      	adds	r2, #8
 8000d8a:	69b9      	ldr	r1, [r7, #24]
 8000d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4013      	ands	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 0203 	and.w	r2, r3, #3
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	f000 80ae 	beq.w	8000f2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	4b5d      	ldr	r3, [pc, #372]	; (8000f4c <HAL_GPIO_Init+0x300>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	4a5c      	ldr	r2, [pc, #368]	; (8000f4c <HAL_GPIO_Init+0x300>)
 8000ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de0:	6453      	str	r3, [r2, #68]	; 0x44
 8000de2:	4b5a      	ldr	r3, [pc, #360]	; (8000f4c <HAL_GPIO_Init+0x300>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dee:	4a58      	ldr	r2, [pc, #352]	; (8000f50 <HAL_GPIO_Init+0x304>)
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	089b      	lsrs	r3, r3, #2
 8000df4:	3302      	adds	r3, #2
 8000df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	f003 0303 	and.w	r3, r3, #3
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	220f      	movs	r2, #15
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a4f      	ldr	r2, [pc, #316]	; (8000f54 <HAL_GPIO_Init+0x308>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d025      	beq.n	8000e66 <HAL_GPIO_Init+0x21a>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a4e      	ldr	r2, [pc, #312]	; (8000f58 <HAL_GPIO_Init+0x30c>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d01f      	beq.n	8000e62 <HAL_GPIO_Init+0x216>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a4d      	ldr	r2, [pc, #308]	; (8000f5c <HAL_GPIO_Init+0x310>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d019      	beq.n	8000e5e <HAL_GPIO_Init+0x212>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a4c      	ldr	r2, [pc, #304]	; (8000f60 <HAL_GPIO_Init+0x314>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d013      	beq.n	8000e5a <HAL_GPIO_Init+0x20e>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a4b      	ldr	r2, [pc, #300]	; (8000f64 <HAL_GPIO_Init+0x318>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d00d      	beq.n	8000e56 <HAL_GPIO_Init+0x20a>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a4a      	ldr	r2, [pc, #296]	; (8000f68 <HAL_GPIO_Init+0x31c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d007      	beq.n	8000e52 <HAL_GPIO_Init+0x206>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a49      	ldr	r2, [pc, #292]	; (8000f6c <HAL_GPIO_Init+0x320>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d101      	bne.n	8000e4e <HAL_GPIO_Init+0x202>
 8000e4a:	2306      	movs	r3, #6
 8000e4c:	e00c      	b.n	8000e68 <HAL_GPIO_Init+0x21c>
 8000e4e:	2307      	movs	r3, #7
 8000e50:	e00a      	b.n	8000e68 <HAL_GPIO_Init+0x21c>
 8000e52:	2305      	movs	r3, #5
 8000e54:	e008      	b.n	8000e68 <HAL_GPIO_Init+0x21c>
 8000e56:	2304      	movs	r3, #4
 8000e58:	e006      	b.n	8000e68 <HAL_GPIO_Init+0x21c>
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	e004      	b.n	8000e68 <HAL_GPIO_Init+0x21c>
 8000e5e:	2302      	movs	r3, #2
 8000e60:	e002      	b.n	8000e68 <HAL_GPIO_Init+0x21c>
 8000e62:	2301      	movs	r3, #1
 8000e64:	e000      	b.n	8000e68 <HAL_GPIO_Init+0x21c>
 8000e66:	2300      	movs	r3, #0
 8000e68:	69fa      	ldr	r2, [r7, #28]
 8000e6a:	f002 0203 	and.w	r2, r2, #3
 8000e6e:	0092      	lsls	r2, r2, #2
 8000e70:	4093      	lsls	r3, r2
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e78:	4935      	ldr	r1, [pc, #212]	; (8000f50 <HAL_GPIO_Init+0x304>)
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	089b      	lsrs	r3, r3, #2
 8000e7e:	3302      	adds	r3, #2
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e86:	4b3a      	ldr	r3, [pc, #232]	; (8000f70 <HAL_GPIO_Init+0x324>)
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4013      	ands	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d003      	beq.n	8000eaa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eaa:	4a31      	ldr	r2, [pc, #196]	; (8000f70 <HAL_GPIO_Init+0x324>)
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eb0:	4b2f      	ldr	r3, [pc, #188]	; (8000f70 <HAL_GPIO_Init+0x324>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d003      	beq.n	8000ed4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ed4:	4a26      	ldr	r2, [pc, #152]	; (8000f70 <HAL_GPIO_Init+0x324>)
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eda:	4b25      	ldr	r3, [pc, #148]	; (8000f70 <HAL_GPIO_Init+0x324>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d003      	beq.n	8000efe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000efe:	4a1c      	ldr	r2, [pc, #112]	; (8000f70 <HAL_GPIO_Init+0x324>)
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f04:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <HAL_GPIO_Init+0x324>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d003      	beq.n	8000f28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f28:	4a11      	ldr	r2, [pc, #68]	; (8000f70 <HAL_GPIO_Init+0x324>)
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3301      	adds	r3, #1
 8000f32:	61fb      	str	r3, [r7, #28]
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	2b0f      	cmp	r3, #15
 8000f38:	f67f ae96 	bls.w	8000c68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	3724      	adds	r7, #36	; 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40013800 	.word	0x40013800
 8000f54:	40020000 	.word	0x40020000
 8000f58:	40020400 	.word	0x40020400
 8000f5c:	40020800 	.word	0x40020800
 8000f60:	40020c00 	.word	0x40020c00
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40021400 	.word	0x40021400
 8000f6c:	40021800 	.word	0x40021800
 8000f70:	40013c00 	.word	0x40013c00

08000f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d101      	bne.n	8000f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e0cc      	b.n	8001122 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f88:	4b68      	ldr	r3, [pc, #416]	; (800112c <HAL_RCC_ClockConfig+0x1b8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 030f 	and.w	r3, r3, #15
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d90c      	bls.n	8000fb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f96:	4b65      	ldr	r3, [pc, #404]	; (800112c <HAL_RCC_ClockConfig+0x1b8>)
 8000f98:	683a      	ldr	r2, [r7, #0]
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f9e:	4b63      	ldr	r3, [pc, #396]	; (800112c <HAL_RCC_ClockConfig+0x1b8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 030f 	and.w	r3, r3, #15
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d001      	beq.n	8000fb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e0b8      	b.n	8001122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d020      	beq.n	8000ffe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f003 0304 	and.w	r3, r3, #4
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d005      	beq.n	8000fd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fc8:	4b59      	ldr	r3, [pc, #356]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	4a58      	ldr	r2, [pc, #352]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 8000fce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000fd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 0308 	and.w	r3, r3, #8
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d005      	beq.n	8000fec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fe0:	4b53      	ldr	r3, [pc, #332]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	4a52      	ldr	r2, [pc, #328]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 8000fe6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000fea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fec:	4b50      	ldr	r3, [pc, #320]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	494d      	ldr	r1, [pc, #308]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	2b00      	cmp	r3, #0
 8001008:	d044      	beq.n	8001094 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d107      	bne.n	8001022 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001012:	4b47      	ldr	r3, [pc, #284]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d119      	bne.n	8001052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e07f      	b.n	8001122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b02      	cmp	r3, #2
 8001028:	d003      	beq.n	8001032 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800102e:	2b03      	cmp	r3, #3
 8001030:	d107      	bne.n	8001042 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001032:	4b3f      	ldr	r3, [pc, #252]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d109      	bne.n	8001052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e06f      	b.n	8001122 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001042:	4b3b      	ldr	r3, [pc, #236]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e067      	b.n	8001122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001052:	4b37      	ldr	r3, [pc, #220]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f023 0203 	bic.w	r2, r3, #3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	4934      	ldr	r1, [pc, #208]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 8001060:	4313      	orrs	r3, r2
 8001062:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001064:	f7ff fcc8 	bl	80009f8 <HAL_GetTick>
 8001068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800106a:	e00a      	b.n	8001082 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800106c:	f7ff fcc4 	bl	80009f8 <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	f241 3288 	movw	r2, #5000	; 0x1388
 800107a:	4293      	cmp	r3, r2
 800107c:	d901      	bls.n	8001082 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e04f      	b.n	8001122 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001082:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 020c 	and.w	r2, r3, #12
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	429a      	cmp	r2, r3
 8001092:	d1eb      	bne.n	800106c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001094:	4b25      	ldr	r3, [pc, #148]	; (800112c <HAL_RCC_ClockConfig+0x1b8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 030f 	and.w	r3, r3, #15
 800109c:	683a      	ldr	r2, [r7, #0]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d20c      	bcs.n	80010bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010a2:	4b22      	ldr	r3, [pc, #136]	; (800112c <HAL_RCC_ClockConfig+0x1b8>)
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010aa:	4b20      	ldr	r3, [pc, #128]	; (800112c <HAL_RCC_ClockConfig+0x1b8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d001      	beq.n	80010bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e032      	b.n	8001122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0304 	and.w	r3, r3, #4
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d008      	beq.n	80010da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	4916      	ldr	r1, [pc, #88]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 80010d6:	4313      	orrs	r3, r2
 80010d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0308 	and.w	r3, r3, #8
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d009      	beq.n	80010fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010e6:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	490e      	ldr	r1, [pc, #56]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010fa:	f000 f855 	bl	80011a8 <HAL_RCC_GetSysClockFreq>
 80010fe:	4602      	mov	r2, r0
 8001100:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <HAL_RCC_ClockConfig+0x1bc>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	091b      	lsrs	r3, r3, #4
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	490a      	ldr	r1, [pc, #40]	; (8001134 <HAL_RCC_ClockConfig+0x1c0>)
 800110c:	5ccb      	ldrb	r3, [r1, r3]
 800110e:	fa22 f303 	lsr.w	r3, r2, r3
 8001112:	4a09      	ldr	r2, [pc, #36]	; (8001138 <HAL_RCC_ClockConfig+0x1c4>)
 8001114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <HAL_RCC_ClockConfig+0x1c8>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fc28 	bl	8000970 <HAL_InitTick>

  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023c00 	.word	0x40023c00
 8001130:	40023800 	.word	0x40023800
 8001134:	08002c54 	.word	0x08002c54
 8001138:	20000000 	.word	0x20000000
 800113c:	20000004 	.word	0x20000004

08001140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001144:	4b03      	ldr	r3, [pc, #12]	; (8001154 <HAL_RCC_GetHCLKFreq+0x14>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000000 	.word	0x20000000

08001158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800115c:	f7ff fff0 	bl	8001140 <HAL_RCC_GetHCLKFreq>
 8001160:	4602      	mov	r2, r0
 8001162:	4b05      	ldr	r3, [pc, #20]	; (8001178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	0a9b      	lsrs	r3, r3, #10
 8001168:	f003 0307 	and.w	r3, r3, #7
 800116c:	4903      	ldr	r1, [pc, #12]	; (800117c <HAL_RCC_GetPCLK1Freq+0x24>)
 800116e:	5ccb      	ldrb	r3, [r1, r3]
 8001170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001174:	4618      	mov	r0, r3
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40023800 	.word	0x40023800
 800117c:	08002c64 	.word	0x08002c64

08001180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001184:	f7ff ffdc 	bl	8001140 <HAL_RCC_GetHCLKFreq>
 8001188:	4602      	mov	r2, r0
 800118a:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	0b5b      	lsrs	r3, r3, #13
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	4903      	ldr	r1, [pc, #12]	; (80011a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001196:	5ccb      	ldrb	r3, [r1, r3]
 8001198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800119c:	4618      	mov	r0, r3
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40023800 	.word	0x40023800
 80011a4:	08002c64 	.word	0x08002c64

080011a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011ac:	b0ae      	sub	sp, #184	; 0xb8
 80011ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80011bc:	2300      	movs	r3, #0
 80011be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011ce:	4bcb      	ldr	r3, [pc, #812]	; (80014fc <HAL_RCC_GetSysClockFreq+0x354>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 030c 	and.w	r3, r3, #12
 80011d6:	2b0c      	cmp	r3, #12
 80011d8:	f200 8206 	bhi.w	80015e8 <HAL_RCC_GetSysClockFreq+0x440>
 80011dc:	a201      	add	r2, pc, #4	; (adr r2, 80011e4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80011de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e2:	bf00      	nop
 80011e4:	08001219 	.word	0x08001219
 80011e8:	080015e9 	.word	0x080015e9
 80011ec:	080015e9 	.word	0x080015e9
 80011f0:	080015e9 	.word	0x080015e9
 80011f4:	08001221 	.word	0x08001221
 80011f8:	080015e9 	.word	0x080015e9
 80011fc:	080015e9 	.word	0x080015e9
 8001200:	080015e9 	.word	0x080015e9
 8001204:	08001229 	.word	0x08001229
 8001208:	080015e9 	.word	0x080015e9
 800120c:	080015e9 	.word	0x080015e9
 8001210:	080015e9 	.word	0x080015e9
 8001214:	08001419 	.word	0x08001419
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001218:	4bb9      	ldr	r3, [pc, #740]	; (8001500 <HAL_RCC_GetSysClockFreq+0x358>)
 800121a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800121e:	e1e7      	b.n	80015f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001220:	4bb8      	ldr	r3, [pc, #736]	; (8001504 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001222:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001226:	e1e3      	b.n	80015f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001228:	4bb4      	ldr	r3, [pc, #720]	; (80014fc <HAL_RCC_GetSysClockFreq+0x354>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001230:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001234:	4bb1      	ldr	r3, [pc, #708]	; (80014fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d071      	beq.n	8001324 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001240:	4bae      	ldr	r3, [pc, #696]	; (80014fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	099b      	lsrs	r3, r3, #6
 8001246:	2200      	movs	r2, #0
 8001248:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800124c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001250:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001258:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800125c:	2300      	movs	r3, #0
 800125e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001262:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001266:	4622      	mov	r2, r4
 8001268:	462b      	mov	r3, r5
 800126a:	f04f 0000 	mov.w	r0, #0
 800126e:	f04f 0100 	mov.w	r1, #0
 8001272:	0159      	lsls	r1, r3, #5
 8001274:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001278:	0150      	lsls	r0, r2, #5
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4621      	mov	r1, r4
 8001280:	1a51      	subs	r1, r2, r1
 8001282:	6439      	str	r1, [r7, #64]	; 0x40
 8001284:	4629      	mov	r1, r5
 8001286:	eb63 0301 	sbc.w	r3, r3, r1
 800128a:	647b      	str	r3, [r7, #68]	; 0x44
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001298:	4649      	mov	r1, r9
 800129a:	018b      	lsls	r3, r1, #6
 800129c:	4641      	mov	r1, r8
 800129e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80012a2:	4641      	mov	r1, r8
 80012a4:	018a      	lsls	r2, r1, #6
 80012a6:	4641      	mov	r1, r8
 80012a8:	1a51      	subs	r1, r2, r1
 80012aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80012ac:	4649      	mov	r1, r9
 80012ae:	eb63 0301 	sbc.w	r3, r3, r1
 80012b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	f04f 0300 	mov.w	r3, #0
 80012bc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80012c0:	4649      	mov	r1, r9
 80012c2:	00cb      	lsls	r3, r1, #3
 80012c4:	4641      	mov	r1, r8
 80012c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80012ca:	4641      	mov	r1, r8
 80012cc:	00ca      	lsls	r2, r1, #3
 80012ce:	4610      	mov	r0, r2
 80012d0:	4619      	mov	r1, r3
 80012d2:	4603      	mov	r3, r0
 80012d4:	4622      	mov	r2, r4
 80012d6:	189b      	adds	r3, r3, r2
 80012d8:	633b      	str	r3, [r7, #48]	; 0x30
 80012da:	462b      	mov	r3, r5
 80012dc:	460a      	mov	r2, r1
 80012de:	eb42 0303 	adc.w	r3, r2, r3
 80012e2:	637b      	str	r3, [r7, #52]	; 0x34
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	f04f 0300 	mov.w	r3, #0
 80012ec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80012f0:	4629      	mov	r1, r5
 80012f2:	024b      	lsls	r3, r1, #9
 80012f4:	4621      	mov	r1, r4
 80012f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80012fa:	4621      	mov	r1, r4
 80012fc:	024a      	lsls	r2, r1, #9
 80012fe:	4610      	mov	r0, r2
 8001300:	4619      	mov	r1, r3
 8001302:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001306:	2200      	movs	r2, #0
 8001308:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800130c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001310:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001314:	f7fe ffd4 	bl	80002c0 <__aeabi_uldivmod>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4613      	mov	r3, r2
 800131e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001322:	e067      	b.n	80013f4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001324:	4b75      	ldr	r3, [pc, #468]	; (80014fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	099b      	lsrs	r3, r3, #6
 800132a:	2200      	movs	r2, #0
 800132c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001330:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001334:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800133c:	67bb      	str	r3, [r7, #120]	; 0x78
 800133e:	2300      	movs	r3, #0
 8001340:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001342:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001346:	4622      	mov	r2, r4
 8001348:	462b      	mov	r3, r5
 800134a:	f04f 0000 	mov.w	r0, #0
 800134e:	f04f 0100 	mov.w	r1, #0
 8001352:	0159      	lsls	r1, r3, #5
 8001354:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001358:	0150      	lsls	r0, r2, #5
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4621      	mov	r1, r4
 8001360:	1a51      	subs	r1, r2, r1
 8001362:	62b9      	str	r1, [r7, #40]	; 0x28
 8001364:	4629      	mov	r1, r5
 8001366:	eb63 0301 	sbc.w	r3, r3, r1
 800136a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001378:	4649      	mov	r1, r9
 800137a:	018b      	lsls	r3, r1, #6
 800137c:	4641      	mov	r1, r8
 800137e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001382:	4641      	mov	r1, r8
 8001384:	018a      	lsls	r2, r1, #6
 8001386:	4641      	mov	r1, r8
 8001388:	ebb2 0a01 	subs.w	sl, r2, r1
 800138c:	4649      	mov	r1, r9
 800138e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	f04f 0300 	mov.w	r3, #0
 800139a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800139e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80013a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80013a6:	4692      	mov	sl, r2
 80013a8:	469b      	mov	fp, r3
 80013aa:	4623      	mov	r3, r4
 80013ac:	eb1a 0303 	adds.w	r3, sl, r3
 80013b0:	623b      	str	r3, [r7, #32]
 80013b2:	462b      	mov	r3, r5
 80013b4:	eb4b 0303 	adc.w	r3, fp, r3
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	f04f 0300 	mov.w	r3, #0
 80013c2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80013c6:	4629      	mov	r1, r5
 80013c8:	028b      	lsls	r3, r1, #10
 80013ca:	4621      	mov	r1, r4
 80013cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80013d0:	4621      	mov	r1, r4
 80013d2:	028a      	lsls	r2, r1, #10
 80013d4:	4610      	mov	r0, r2
 80013d6:	4619      	mov	r1, r3
 80013d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80013dc:	2200      	movs	r2, #0
 80013de:	673b      	str	r3, [r7, #112]	; 0x70
 80013e0:	677a      	str	r2, [r7, #116]	; 0x74
 80013e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80013e6:	f7fe ff6b 	bl	80002c0 <__aeabi_uldivmod>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4613      	mov	r3, r2
 80013f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013f4:	4b41      	ldr	r3, [pc, #260]	; (80014fc <HAL_RCC_GetSysClockFreq+0x354>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	0c1b      	lsrs	r3, r3, #16
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	3301      	adds	r3, #1
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001406:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800140a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001412:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001416:	e0eb      	b.n	80015f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001418:	4b38      	ldr	r3, [pc, #224]	; (80014fc <HAL_RCC_GetSysClockFreq+0x354>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001420:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001424:	4b35      	ldr	r3, [pc, #212]	; (80014fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d06b      	beq.n	8001508 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001430:	4b32      	ldr	r3, [pc, #200]	; (80014fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	099b      	lsrs	r3, r3, #6
 8001436:	2200      	movs	r2, #0
 8001438:	66bb      	str	r3, [r7, #104]	; 0x68
 800143a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800143c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800143e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001442:	663b      	str	r3, [r7, #96]	; 0x60
 8001444:	2300      	movs	r3, #0
 8001446:	667b      	str	r3, [r7, #100]	; 0x64
 8001448:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800144c:	4622      	mov	r2, r4
 800144e:	462b      	mov	r3, r5
 8001450:	f04f 0000 	mov.w	r0, #0
 8001454:	f04f 0100 	mov.w	r1, #0
 8001458:	0159      	lsls	r1, r3, #5
 800145a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800145e:	0150      	lsls	r0, r2, #5
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4621      	mov	r1, r4
 8001466:	1a51      	subs	r1, r2, r1
 8001468:	61b9      	str	r1, [r7, #24]
 800146a:	4629      	mov	r1, r5
 800146c:	eb63 0301 	sbc.w	r3, r3, r1
 8001470:	61fb      	str	r3, [r7, #28]
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800147e:	4659      	mov	r1, fp
 8001480:	018b      	lsls	r3, r1, #6
 8001482:	4651      	mov	r1, sl
 8001484:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001488:	4651      	mov	r1, sl
 800148a:	018a      	lsls	r2, r1, #6
 800148c:	4651      	mov	r1, sl
 800148e:	ebb2 0801 	subs.w	r8, r2, r1
 8001492:	4659      	mov	r1, fp
 8001494:	eb63 0901 	sbc.w	r9, r3, r1
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	f04f 0300 	mov.w	r3, #0
 80014a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014ac:	4690      	mov	r8, r2
 80014ae:	4699      	mov	r9, r3
 80014b0:	4623      	mov	r3, r4
 80014b2:	eb18 0303 	adds.w	r3, r8, r3
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	462b      	mov	r3, r5
 80014ba:	eb49 0303 	adc.w	r3, r9, r3
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	f04f 0200 	mov.w	r2, #0
 80014c4:	f04f 0300 	mov.w	r3, #0
 80014c8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80014cc:	4629      	mov	r1, r5
 80014ce:	024b      	lsls	r3, r1, #9
 80014d0:	4621      	mov	r1, r4
 80014d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014d6:	4621      	mov	r1, r4
 80014d8:	024a      	lsls	r2, r1, #9
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014e2:	2200      	movs	r2, #0
 80014e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80014e6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80014e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80014ec:	f7fe fee8 	bl	80002c0 <__aeabi_uldivmod>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4613      	mov	r3, r2
 80014f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80014fa:	e065      	b.n	80015c8 <HAL_RCC_GetSysClockFreq+0x420>
 80014fc:	40023800 	.word	0x40023800
 8001500:	00f42400 	.word	0x00f42400
 8001504:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001508:	4b3d      	ldr	r3, [pc, #244]	; (8001600 <HAL_RCC_GetSysClockFreq+0x458>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	099b      	lsrs	r3, r3, #6
 800150e:	2200      	movs	r2, #0
 8001510:	4618      	mov	r0, r3
 8001512:	4611      	mov	r1, r2
 8001514:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001518:	653b      	str	r3, [r7, #80]	; 0x50
 800151a:	2300      	movs	r3, #0
 800151c:	657b      	str	r3, [r7, #84]	; 0x54
 800151e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001522:	4642      	mov	r2, r8
 8001524:	464b      	mov	r3, r9
 8001526:	f04f 0000 	mov.w	r0, #0
 800152a:	f04f 0100 	mov.w	r1, #0
 800152e:	0159      	lsls	r1, r3, #5
 8001530:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001534:	0150      	lsls	r0, r2, #5
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4641      	mov	r1, r8
 800153c:	1a51      	subs	r1, r2, r1
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	4649      	mov	r1, r9
 8001542:	eb63 0301 	sbc.w	r3, r3, r1
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	f04f 0300 	mov.w	r3, #0
 8001550:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001554:	4659      	mov	r1, fp
 8001556:	018b      	lsls	r3, r1, #6
 8001558:	4651      	mov	r1, sl
 800155a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800155e:	4651      	mov	r1, sl
 8001560:	018a      	lsls	r2, r1, #6
 8001562:	4651      	mov	r1, sl
 8001564:	1a54      	subs	r4, r2, r1
 8001566:	4659      	mov	r1, fp
 8001568:	eb63 0501 	sbc.w	r5, r3, r1
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	00eb      	lsls	r3, r5, #3
 8001576:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800157a:	00e2      	lsls	r2, r4, #3
 800157c:	4614      	mov	r4, r2
 800157e:	461d      	mov	r5, r3
 8001580:	4643      	mov	r3, r8
 8001582:	18e3      	adds	r3, r4, r3
 8001584:	603b      	str	r3, [r7, #0]
 8001586:	464b      	mov	r3, r9
 8001588:	eb45 0303 	adc.w	r3, r5, r3
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	f04f 0300 	mov.w	r3, #0
 8001596:	e9d7 4500 	ldrd	r4, r5, [r7]
 800159a:	4629      	mov	r1, r5
 800159c:	028b      	lsls	r3, r1, #10
 800159e:	4621      	mov	r1, r4
 80015a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015a4:	4621      	mov	r1, r4
 80015a6:	028a      	lsls	r2, r1, #10
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015b0:	2200      	movs	r2, #0
 80015b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80015b4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80015b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80015ba:	f7fe fe81 	bl	80002c0 <__aeabi_uldivmod>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4613      	mov	r3, r2
 80015c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80015c8:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <HAL_RCC_GetSysClockFreq+0x458>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	0f1b      	lsrs	r3, r3, #28
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80015d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80015da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80015de:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80015e6:	e003      	b.n	80015f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_RCC_GetSysClockFreq+0x45c>)
 80015ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80015ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	37b8      	adds	r7, #184	; 0xb8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800
 8001604:	00f42400 	.word	0x00f42400

08001608 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e28d      	b.n	8001b36 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 8083 	beq.w	800172e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001628:	4b94      	ldr	r3, [pc, #592]	; (800187c <HAL_RCC_OscConfig+0x274>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f003 030c 	and.w	r3, r3, #12
 8001630:	2b04      	cmp	r3, #4
 8001632:	d019      	beq.n	8001668 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001634:	4b91      	ldr	r3, [pc, #580]	; (800187c <HAL_RCC_OscConfig+0x274>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800163c:	2b08      	cmp	r3, #8
 800163e:	d106      	bne.n	800164e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001640:	4b8e      	ldr	r3, [pc, #568]	; (800187c <HAL_RCC_OscConfig+0x274>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001648:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800164c:	d00c      	beq.n	8001668 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800164e:	4b8b      	ldr	r3, [pc, #556]	; (800187c <HAL_RCC_OscConfig+0x274>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001656:	2b0c      	cmp	r3, #12
 8001658:	d112      	bne.n	8001680 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800165a:	4b88      	ldr	r3, [pc, #544]	; (800187c <HAL_RCC_OscConfig+0x274>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001662:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001666:	d10b      	bne.n	8001680 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001668:	4b84      	ldr	r3, [pc, #528]	; (800187c <HAL_RCC_OscConfig+0x274>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d05b      	beq.n	800172c <HAL_RCC_OscConfig+0x124>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d157      	bne.n	800172c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e25a      	b.n	8001b36 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001688:	d106      	bne.n	8001698 <HAL_RCC_OscConfig+0x90>
 800168a:	4b7c      	ldr	r3, [pc, #496]	; (800187c <HAL_RCC_OscConfig+0x274>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a7b      	ldr	r2, [pc, #492]	; (800187c <HAL_RCC_OscConfig+0x274>)
 8001690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	e01d      	b.n	80016d4 <HAL_RCC_OscConfig+0xcc>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016a0:	d10c      	bne.n	80016bc <HAL_RCC_OscConfig+0xb4>
 80016a2:	4b76      	ldr	r3, [pc, #472]	; (800187c <HAL_RCC_OscConfig+0x274>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a75      	ldr	r2, [pc, #468]	; (800187c <HAL_RCC_OscConfig+0x274>)
 80016a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	4b73      	ldr	r3, [pc, #460]	; (800187c <HAL_RCC_OscConfig+0x274>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a72      	ldr	r2, [pc, #456]	; (800187c <HAL_RCC_OscConfig+0x274>)
 80016b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	e00b      	b.n	80016d4 <HAL_RCC_OscConfig+0xcc>
 80016bc:	4b6f      	ldr	r3, [pc, #444]	; (800187c <HAL_RCC_OscConfig+0x274>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a6e      	ldr	r2, [pc, #440]	; (800187c <HAL_RCC_OscConfig+0x274>)
 80016c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	4b6c      	ldr	r3, [pc, #432]	; (800187c <HAL_RCC_OscConfig+0x274>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a6b      	ldr	r2, [pc, #428]	; (800187c <HAL_RCC_OscConfig+0x274>)
 80016ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d013      	beq.n	8001704 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016dc:	f7ff f98c 	bl	80009f8 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e4:	f7ff f988 	bl	80009f8 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b64      	cmp	r3, #100	; 0x64
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e21f      	b.n	8001b36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f6:	4b61      	ldr	r3, [pc, #388]	; (800187c <HAL_RCC_OscConfig+0x274>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f0      	beq.n	80016e4 <HAL_RCC_OscConfig+0xdc>
 8001702:	e014      	b.n	800172e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001704:	f7ff f978 	bl	80009f8 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800170c:	f7ff f974 	bl	80009f8 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b64      	cmp	r3, #100	; 0x64
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e20b      	b.n	8001b36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800171e:	4b57      	ldr	r3, [pc, #348]	; (800187c <HAL_RCC_OscConfig+0x274>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x104>
 800172a:	e000      	b.n	800172e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800172c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d06f      	beq.n	800181a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800173a:	4b50      	ldr	r3, [pc, #320]	; (800187c <HAL_RCC_OscConfig+0x274>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	2b00      	cmp	r3, #0
 8001744:	d017      	beq.n	8001776 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001746:	4b4d      	ldr	r3, [pc, #308]	; (800187c <HAL_RCC_OscConfig+0x274>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800174e:	2b08      	cmp	r3, #8
 8001750:	d105      	bne.n	800175e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001752:	4b4a      	ldr	r3, [pc, #296]	; (800187c <HAL_RCC_OscConfig+0x274>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00b      	beq.n	8001776 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800175e:	4b47      	ldr	r3, [pc, #284]	; (800187c <HAL_RCC_OscConfig+0x274>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001766:	2b0c      	cmp	r3, #12
 8001768:	d11c      	bne.n	80017a4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800176a:	4b44      	ldr	r3, [pc, #272]	; (800187c <HAL_RCC_OscConfig+0x274>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d116      	bne.n	80017a4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001776:	4b41      	ldr	r3, [pc, #260]	; (800187c <HAL_RCC_OscConfig+0x274>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d005      	beq.n	800178e <HAL_RCC_OscConfig+0x186>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d001      	beq.n	800178e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e1d3      	b.n	8001b36 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178e:	4b3b      	ldr	r3, [pc, #236]	; (800187c <HAL_RCC_OscConfig+0x274>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	4937      	ldr	r1, [pc, #220]	; (800187c <HAL_RCC_OscConfig+0x274>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a2:	e03a      	b.n	800181a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d020      	beq.n	80017ee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017ac:	4b34      	ldr	r3, [pc, #208]	; (8001880 <HAL_RCC_OscConfig+0x278>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b2:	f7ff f921 	bl	80009f8 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ba:	f7ff f91d 	bl	80009f8 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e1b4      	b.n	8001b36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017cc:	4b2b      	ldr	r3, [pc, #172]	; (800187c <HAL_RCC_OscConfig+0x274>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f0      	beq.n	80017ba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d8:	4b28      	ldr	r3, [pc, #160]	; (800187c <HAL_RCC_OscConfig+0x274>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	4925      	ldr	r1, [pc, #148]	; (800187c <HAL_RCC_OscConfig+0x274>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	600b      	str	r3, [r1, #0]
 80017ec:	e015      	b.n	800181a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ee:	4b24      	ldr	r3, [pc, #144]	; (8001880 <HAL_RCC_OscConfig+0x278>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f4:	f7ff f900 	bl	80009f8 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017fc:	f7ff f8fc 	bl	80009f8 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e193      	b.n	8001b36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800180e:	4b1b      	ldr	r3, [pc, #108]	; (800187c <HAL_RCC_OscConfig+0x274>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	2b00      	cmp	r3, #0
 8001824:	d036      	beq.n	8001894 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d016      	beq.n	800185c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001830:	2201      	movs	r2, #1
 8001832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001834:	f7ff f8e0 	bl	80009f8 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800183c:	f7ff f8dc 	bl	80009f8 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e173      	b.n	8001b36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_RCC_OscConfig+0x274>)
 8001850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0f0      	beq.n	800183c <HAL_RCC_OscConfig+0x234>
 800185a:	e01b      	b.n	8001894 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800185c:	4b09      	ldr	r3, [pc, #36]	; (8001884 <HAL_RCC_OscConfig+0x27c>)
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001862:	f7ff f8c9 	bl	80009f8 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001868:	e00e      	b.n	8001888 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800186a:	f7ff f8c5 	bl	80009f8 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d907      	bls.n	8001888 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e15c      	b.n	8001b36 <HAL_RCC_OscConfig+0x52e>
 800187c:	40023800 	.word	0x40023800
 8001880:	42470000 	.word	0x42470000
 8001884:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001888:	4b8a      	ldr	r3, [pc, #552]	; (8001ab4 <HAL_RCC_OscConfig+0x4ac>)
 800188a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1ea      	bne.n	800186a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 8097 	beq.w	80019d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a2:	2300      	movs	r3, #0
 80018a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018a6:	4b83      	ldr	r3, [pc, #524]	; (8001ab4 <HAL_RCC_OscConfig+0x4ac>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10f      	bne.n	80018d2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	4b7f      	ldr	r3, [pc, #508]	; (8001ab4 <HAL_RCC_OscConfig+0x4ac>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	4a7e      	ldr	r2, [pc, #504]	; (8001ab4 <HAL_RCC_OscConfig+0x4ac>)
 80018bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c0:	6413      	str	r3, [r2, #64]	; 0x40
 80018c2:	4b7c      	ldr	r3, [pc, #496]	; (8001ab4 <HAL_RCC_OscConfig+0x4ac>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ce:	2301      	movs	r3, #1
 80018d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d2:	4b79      	ldr	r3, [pc, #484]	; (8001ab8 <HAL_RCC_OscConfig+0x4b0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d118      	bne.n	8001910 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018de:	4b76      	ldr	r3, [pc, #472]	; (8001ab8 <HAL_RCC_OscConfig+0x4b0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a75      	ldr	r2, [pc, #468]	; (8001ab8 <HAL_RCC_OscConfig+0x4b0>)
 80018e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ea:	f7ff f885 	bl	80009f8 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f2:	f7ff f881 	bl	80009f8 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e118      	b.n	8001b36 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001904:	4b6c      	ldr	r3, [pc, #432]	; (8001ab8 <HAL_RCC_OscConfig+0x4b0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0f0      	beq.n	80018f2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d106      	bne.n	8001926 <HAL_RCC_OscConfig+0x31e>
 8001918:	4b66      	ldr	r3, [pc, #408]	; (8001ab4 <HAL_RCC_OscConfig+0x4ac>)
 800191a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191c:	4a65      	ldr	r2, [pc, #404]	; (8001ab4 <HAL_RCC_OscConfig+0x4ac>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	6713      	str	r3, [r2, #112]	; 0x70
 8001924:	e01c      	b.n	8001960 <HAL_RCC_OscConfig+0x358>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2b05      	cmp	r3, #5
 800192c:	d10c      	bne.n	8001948 <HAL_RCC_OscConfig+0x340>
 800192e:	4b61      	ldr	r3, [pc, #388]	; (8001ab4 <HAL_RCC_OscConfig+0x4ac>)
 8001930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001932:	4a60      	ldr	r2, [pc, #384]	; (8001ab4 <HAL_RCC_OscConfig+0x4ac>)
 8001934:	f043 0304 	orr.w	r3, r3, #4
 8001938:	6713      	str	r3, [r2, #112]	; 0x70
 800193a:	4b5e      	ldr	r3, [pc, #376]	; (8001ab4 <HAL_RCC_OscConfig+0x4ac>)
 800193c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193e:	4a5d      	ldr	r2, [pc, #372]	; (8001ab4 <HAL_RCC_OscConfig+0x4ac>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	6713      	str	r3, [r2, #112]	; 0x70
 8001946:	e00b      	b.n	8001960 <HAL_RCC_OscConfig+0x358>
 8001948:	4b5a      	ldr	r3, [pc, #360]	; (8001ab4 <HAL_RCC_OscConfig+0x4ac>)
 800194a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194c:	4a59      	ldr	r2, [pc, #356]	; (8001ab4 <HAL_RCC_OscConfig+0x4ac>)
 800194e:	f023 0301 	bic.w	r3, r3, #1
 8001952:	6713      	str	r3, [r2, #112]	; 0x70
 8001954:	4b57      	ldr	r3, [pc, #348]	; (8001ab4 <HAL_RCC_OscConfig+0x4ac>)
 8001956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001958:	4a56      	ldr	r2, [pc, #344]	; (8001ab4 <HAL_RCC_OscConfig+0x4ac>)
 800195a:	f023 0304 	bic.w	r3, r3, #4
 800195e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d015      	beq.n	8001994 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001968:	f7ff f846 	bl	80009f8 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800196e:	e00a      	b.n	8001986 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001970:	f7ff f842 	bl	80009f8 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	f241 3288 	movw	r2, #5000	; 0x1388
 800197e:	4293      	cmp	r3, r2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e0d7      	b.n	8001b36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001986:	4b4b      	ldr	r3, [pc, #300]	; (8001ab4 <HAL_RCC_OscConfig+0x4ac>)
 8001988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0ee      	beq.n	8001970 <HAL_RCC_OscConfig+0x368>
 8001992:	e014      	b.n	80019be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001994:	f7ff f830 	bl	80009f8 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800199a:	e00a      	b.n	80019b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800199c:	f7ff f82c 	bl	80009f8 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e0c1      	b.n	8001b36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b2:	4b40      	ldr	r3, [pc, #256]	; (8001ab4 <HAL_RCC_OscConfig+0x4ac>)
 80019b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1ee      	bne.n	800199c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019be:	7dfb      	ldrb	r3, [r7, #23]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d105      	bne.n	80019d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c4:	4b3b      	ldr	r3, [pc, #236]	; (8001ab4 <HAL_RCC_OscConfig+0x4ac>)
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	4a3a      	ldr	r2, [pc, #232]	; (8001ab4 <HAL_RCC_OscConfig+0x4ac>)
 80019ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 80ad 	beq.w	8001b34 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019da:	4b36      	ldr	r3, [pc, #216]	; (8001ab4 <HAL_RCC_OscConfig+0x4ac>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 030c 	and.w	r3, r3, #12
 80019e2:	2b08      	cmp	r3, #8
 80019e4:	d060      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d145      	bne.n	8001a7a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ee:	4b33      	ldr	r3, [pc, #204]	; (8001abc <HAL_RCC_OscConfig+0x4b4>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f4:	f7ff f800 	bl	80009f8 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019fc:	f7fe fffc 	bl	80009f8 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e093      	b.n	8001b36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a0e:	4b29      	ldr	r3, [pc, #164]	; (8001ab4 <HAL_RCC_OscConfig+0x4ac>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69da      	ldr	r2, [r3, #28]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	019b      	lsls	r3, r3, #6
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a30:	085b      	lsrs	r3, r3, #1
 8001a32:	3b01      	subs	r3, #1
 8001a34:	041b      	lsls	r3, r3, #16
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3c:	061b      	lsls	r3, r3, #24
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a44:	071b      	lsls	r3, r3, #28
 8001a46:	491b      	ldr	r1, [pc, #108]	; (8001ab4 <HAL_RCC_OscConfig+0x4ac>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <HAL_RCC_OscConfig+0x4b4>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a52:	f7fe ffd1 	bl	80009f8 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a5a:	f7fe ffcd 	bl	80009f8 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e064      	b.n	8001b36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <HAL_RCC_OscConfig+0x4ac>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f0      	beq.n	8001a5a <HAL_RCC_OscConfig+0x452>
 8001a78:	e05c      	b.n	8001b34 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <HAL_RCC_OscConfig+0x4b4>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a80:	f7fe ffba 	bl	80009f8 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a88:	f7fe ffb6 	bl	80009f8 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e04d      	b.n	8001b36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_RCC_OscConfig+0x4ac>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f0      	bne.n	8001a88 <HAL_RCC_OscConfig+0x480>
 8001aa6:	e045      	b.n	8001b34 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d107      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e040      	b.n	8001b36 <HAL_RCC_OscConfig+0x52e>
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40007000 	.word	0x40007000
 8001abc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ac0:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <HAL_RCC_OscConfig+0x538>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d030      	beq.n	8001b30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d129      	bne.n	8001b30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d122      	bne.n	8001b30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001af0:	4013      	ands	r3, r2
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001af6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d119      	bne.n	8001b30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	085b      	lsrs	r3, r3, #1
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d10f      	bne.n	8001b30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d107      	bne.n	8001b30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d001      	beq.n	8001b34 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800

08001b44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e03f      	b.n	8001bd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d106      	bne.n	8001b70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7fe fe20 	bl	80007b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2224      	movs	r2, #36	; 0x24
 8001b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f929 	bl	8001de0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	691a      	ldr	r2, [r3, #16]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	695a      	ldr	r2, [r3, #20]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2220      	movs	r2, #32
 8001bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b08a      	sub	sp, #40	; 0x28
 8001be2:	af02      	add	r7, sp, #8
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	4613      	mov	r3, r2
 8001bec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b20      	cmp	r3, #32
 8001bfc:	d17c      	bne.n	8001cf8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d002      	beq.n	8001c0a <HAL_UART_Transmit+0x2c>
 8001c04:	88fb      	ldrh	r3, [r7, #6]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e075      	b.n	8001cfa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d101      	bne.n	8001c1c <HAL_UART_Transmit+0x3e>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e06e      	b.n	8001cfa <HAL_UART_Transmit+0x11c>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2221      	movs	r2, #33	; 0x21
 8001c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c32:	f7fe fee1 	bl	80009f8 <HAL_GetTick>
 8001c36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	88fa      	ldrh	r2, [r7, #6]
 8001c3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	88fa      	ldrh	r2, [r7, #6]
 8001c42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c4c:	d108      	bne.n	8001c60 <HAL_UART_Transmit+0x82>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d104      	bne.n	8001c60 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	61bb      	str	r3, [r7, #24]
 8001c5e:	e003      	b.n	8001c68 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001c70:	e02a      	b.n	8001cc8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2180      	movs	r1, #128	; 0x80
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f000 f840 	bl	8001d02 <UART_WaitOnFlagUntilTimeout>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e036      	b.n	8001cfa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10b      	bne.n	8001caa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ca0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	3302      	adds	r3, #2
 8001ca6:	61bb      	str	r3, [r7, #24]
 8001ca8:	e007      	b.n	8001cba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	781a      	ldrb	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1cf      	bne.n	8001c72 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2140      	movs	r1, #64	; 0x40
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 f810 	bl	8001d02 <UART_WaitOnFlagUntilTimeout>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e006      	b.n	8001cfa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2220      	movs	r2, #32
 8001cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	e000      	b.n	8001cfa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001cf8:	2302      	movs	r3, #2
  }
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3720      	adds	r7, #32
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b090      	sub	sp, #64	; 0x40
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	603b      	str	r3, [r7, #0]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d12:	e050      	b.n	8001db6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1a:	d04c      	beq.n	8001db6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d007      	beq.n	8001d32 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d22:	f7fe fe69 	bl	80009f8 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d241      	bcs.n	8001db6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	330c      	adds	r3, #12
 8001d38:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3c:	e853 3f00 	ldrex	r3, [r3]
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001d48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	330c      	adds	r3, #12
 8001d50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d52:	637a      	str	r2, [r7, #52]	; 0x34
 8001d54:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d5a:	e841 2300 	strex	r3, r2, [r1]
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1e5      	bne.n	8001d32 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	3314      	adds	r3, #20
 8001d6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	e853 3f00 	ldrex	r3, [r3]
 8001d74:	613b      	str	r3, [r7, #16]
   return(result);
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	f023 0301 	bic.w	r3, r3, #1
 8001d7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	3314      	adds	r3, #20
 8001d84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d86:	623a      	str	r2, [r7, #32]
 8001d88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d8a:	69f9      	ldr	r1, [r7, #28]
 8001d8c:	6a3a      	ldr	r2, [r7, #32]
 8001d8e:	e841 2300 	strex	r3, r2, [r1]
 8001d92:	61bb      	str	r3, [r7, #24]
   return(result);
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1e5      	bne.n	8001d66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2220      	movs	r2, #32
 8001da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e00f      	b.n	8001dd6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	bf0c      	ite	eq
 8001dc6:	2301      	moveq	r3, #1
 8001dc8:	2300      	movne	r3, #0
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	461a      	mov	r2, r3
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d09f      	beq.n	8001d14 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3740      	adds	r7, #64	; 0x40
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001de4:	b0c0      	sub	sp, #256	; 0x100
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dfc:	68d9      	ldr	r1, [r3, #12]
 8001dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	ea40 0301 	orr.w	r3, r0, r1
 8001e08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	431a      	orrs	r2, r3
 8001e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001e38:	f021 010c 	bic.w	r1, r1, #12
 8001e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001e46:	430b      	orrs	r3, r1
 8001e48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e5a:	6999      	ldr	r1, [r3, #24]
 8001e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	ea40 0301 	orr.w	r3, r0, r1
 8001e66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	4b8f      	ldr	r3, [pc, #572]	; (80020ac <UART_SetConfig+0x2cc>)
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d005      	beq.n	8001e80 <UART_SetConfig+0xa0>
 8001e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	4b8d      	ldr	r3, [pc, #564]	; (80020b0 <UART_SetConfig+0x2d0>)
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d104      	bne.n	8001e8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e80:	f7ff f97e 	bl	8001180 <HAL_RCC_GetPCLK2Freq>
 8001e84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001e88:	e003      	b.n	8001e92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e8a:	f7ff f965 	bl	8001158 <HAL_RCC_GetPCLK1Freq>
 8001e8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e96:	69db      	ldr	r3, [r3, #28]
 8001e98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e9c:	f040 810c 	bne.w	80020b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ea0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001eaa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001eae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001eb2:	4622      	mov	r2, r4
 8001eb4:	462b      	mov	r3, r5
 8001eb6:	1891      	adds	r1, r2, r2
 8001eb8:	65b9      	str	r1, [r7, #88]	; 0x58
 8001eba:	415b      	adcs	r3, r3
 8001ebc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ebe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ec2:	4621      	mov	r1, r4
 8001ec4:	eb12 0801 	adds.w	r8, r2, r1
 8001ec8:	4629      	mov	r1, r5
 8001eca:	eb43 0901 	adc.w	r9, r3, r1
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001eda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ede:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ee2:	4690      	mov	r8, r2
 8001ee4:	4699      	mov	r9, r3
 8001ee6:	4623      	mov	r3, r4
 8001ee8:	eb18 0303 	adds.w	r3, r8, r3
 8001eec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001ef0:	462b      	mov	r3, r5
 8001ef2:	eb49 0303 	adc.w	r3, r9, r3
 8001ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001f06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001f0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001f0e:	460b      	mov	r3, r1
 8001f10:	18db      	adds	r3, r3, r3
 8001f12:	653b      	str	r3, [r7, #80]	; 0x50
 8001f14:	4613      	mov	r3, r2
 8001f16:	eb42 0303 	adc.w	r3, r2, r3
 8001f1a:	657b      	str	r3, [r7, #84]	; 0x54
 8001f1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001f24:	f7fe f9cc 	bl	80002c0 <__aeabi_uldivmod>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4b61      	ldr	r3, [pc, #388]	; (80020b4 <UART_SetConfig+0x2d4>)
 8001f2e:	fba3 2302 	umull	r2, r3, r3, r2
 8001f32:	095b      	lsrs	r3, r3, #5
 8001f34:	011c      	lsls	r4, r3, #4
 8001f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001f44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001f48:	4642      	mov	r2, r8
 8001f4a:	464b      	mov	r3, r9
 8001f4c:	1891      	adds	r1, r2, r2
 8001f4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8001f50:	415b      	adcs	r3, r3
 8001f52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f58:	4641      	mov	r1, r8
 8001f5a:	eb12 0a01 	adds.w	sl, r2, r1
 8001f5e:	4649      	mov	r1, r9
 8001f60:	eb43 0b01 	adc.w	fp, r3, r1
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f78:	4692      	mov	sl, r2
 8001f7a:	469b      	mov	fp, r3
 8001f7c:	4643      	mov	r3, r8
 8001f7e:	eb1a 0303 	adds.w	r3, sl, r3
 8001f82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001f86:	464b      	mov	r3, r9
 8001f88:	eb4b 0303 	adc.w	r3, fp, r3
 8001f8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001f9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001fa0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	18db      	adds	r3, r3, r3
 8001fa8:	643b      	str	r3, [r7, #64]	; 0x40
 8001faa:	4613      	mov	r3, r2
 8001fac:	eb42 0303 	adc.w	r3, r2, r3
 8001fb0:	647b      	str	r3, [r7, #68]	; 0x44
 8001fb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001fba:	f7fe f981 	bl	80002c0 <__aeabi_uldivmod>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	4b3b      	ldr	r3, [pc, #236]	; (80020b4 <UART_SetConfig+0x2d4>)
 8001fc6:	fba3 2301 	umull	r2, r3, r3, r1
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	2264      	movs	r2, #100	; 0x64
 8001fce:	fb02 f303 	mul.w	r3, r2, r3
 8001fd2:	1acb      	subs	r3, r1, r3
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001fda:	4b36      	ldr	r3, [pc, #216]	; (80020b4 <UART_SetConfig+0x2d4>)
 8001fdc:	fba3 2302 	umull	r2, r3, r3, r2
 8001fe0:	095b      	lsrs	r3, r3, #5
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001fe8:	441c      	add	r4, r3
 8001fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001ff4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001ff8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001ffc:	4642      	mov	r2, r8
 8001ffe:	464b      	mov	r3, r9
 8002000:	1891      	adds	r1, r2, r2
 8002002:	63b9      	str	r1, [r7, #56]	; 0x38
 8002004:	415b      	adcs	r3, r3
 8002006:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002008:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800200c:	4641      	mov	r1, r8
 800200e:	1851      	adds	r1, r2, r1
 8002010:	6339      	str	r1, [r7, #48]	; 0x30
 8002012:	4649      	mov	r1, r9
 8002014:	414b      	adcs	r3, r1
 8002016:	637b      	str	r3, [r7, #52]	; 0x34
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002024:	4659      	mov	r1, fp
 8002026:	00cb      	lsls	r3, r1, #3
 8002028:	4651      	mov	r1, sl
 800202a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800202e:	4651      	mov	r1, sl
 8002030:	00ca      	lsls	r2, r1, #3
 8002032:	4610      	mov	r0, r2
 8002034:	4619      	mov	r1, r3
 8002036:	4603      	mov	r3, r0
 8002038:	4642      	mov	r2, r8
 800203a:	189b      	adds	r3, r3, r2
 800203c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002040:	464b      	mov	r3, r9
 8002042:	460a      	mov	r2, r1
 8002044:	eb42 0303 	adc.w	r3, r2, r3
 8002048:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800204c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002058:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800205c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002060:	460b      	mov	r3, r1
 8002062:	18db      	adds	r3, r3, r3
 8002064:	62bb      	str	r3, [r7, #40]	; 0x28
 8002066:	4613      	mov	r3, r2
 8002068:	eb42 0303 	adc.w	r3, r2, r3
 800206c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800206e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002072:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002076:	f7fe f923 	bl	80002c0 <__aeabi_uldivmod>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <UART_SetConfig+0x2d4>)
 8002080:	fba3 1302 	umull	r1, r3, r3, r2
 8002084:	095b      	lsrs	r3, r3, #5
 8002086:	2164      	movs	r1, #100	; 0x64
 8002088:	fb01 f303 	mul.w	r3, r1, r3
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	3332      	adds	r3, #50	; 0x32
 8002092:	4a08      	ldr	r2, [pc, #32]	; (80020b4 <UART_SetConfig+0x2d4>)
 8002094:	fba2 2303 	umull	r2, r3, r2, r3
 8002098:	095b      	lsrs	r3, r3, #5
 800209a:	f003 0207 	and.w	r2, r3, #7
 800209e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4422      	add	r2, r4
 80020a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80020a8:	e105      	b.n	80022b6 <UART_SetConfig+0x4d6>
 80020aa:	bf00      	nop
 80020ac:	40011000 	.word	0x40011000
 80020b0:	40011400 	.word	0x40011400
 80020b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020bc:	2200      	movs	r2, #0
 80020be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80020c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80020c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80020ca:	4642      	mov	r2, r8
 80020cc:	464b      	mov	r3, r9
 80020ce:	1891      	adds	r1, r2, r2
 80020d0:	6239      	str	r1, [r7, #32]
 80020d2:	415b      	adcs	r3, r3
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
 80020d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020da:	4641      	mov	r1, r8
 80020dc:	1854      	adds	r4, r2, r1
 80020de:	4649      	mov	r1, r9
 80020e0:	eb43 0501 	adc.w	r5, r3, r1
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	00eb      	lsls	r3, r5, #3
 80020ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020f2:	00e2      	lsls	r2, r4, #3
 80020f4:	4614      	mov	r4, r2
 80020f6:	461d      	mov	r5, r3
 80020f8:	4643      	mov	r3, r8
 80020fa:	18e3      	adds	r3, r4, r3
 80020fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002100:	464b      	mov	r3, r9
 8002102:	eb45 0303 	adc.w	r3, r5, r3
 8002106:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800210a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002116:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002126:	4629      	mov	r1, r5
 8002128:	008b      	lsls	r3, r1, #2
 800212a:	4621      	mov	r1, r4
 800212c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002130:	4621      	mov	r1, r4
 8002132:	008a      	lsls	r2, r1, #2
 8002134:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002138:	f7fe f8c2 	bl	80002c0 <__aeabi_uldivmod>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4b60      	ldr	r3, [pc, #384]	; (80022c4 <UART_SetConfig+0x4e4>)
 8002142:	fba3 2302 	umull	r2, r3, r3, r2
 8002146:	095b      	lsrs	r3, r3, #5
 8002148:	011c      	lsls	r4, r3, #4
 800214a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800214e:	2200      	movs	r2, #0
 8002150:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002154:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002158:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800215c:	4642      	mov	r2, r8
 800215e:	464b      	mov	r3, r9
 8002160:	1891      	adds	r1, r2, r2
 8002162:	61b9      	str	r1, [r7, #24]
 8002164:	415b      	adcs	r3, r3
 8002166:	61fb      	str	r3, [r7, #28]
 8002168:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800216c:	4641      	mov	r1, r8
 800216e:	1851      	adds	r1, r2, r1
 8002170:	6139      	str	r1, [r7, #16]
 8002172:	4649      	mov	r1, r9
 8002174:	414b      	adcs	r3, r1
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	f04f 0300 	mov.w	r3, #0
 8002180:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002184:	4659      	mov	r1, fp
 8002186:	00cb      	lsls	r3, r1, #3
 8002188:	4651      	mov	r1, sl
 800218a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800218e:	4651      	mov	r1, sl
 8002190:	00ca      	lsls	r2, r1, #3
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	4603      	mov	r3, r0
 8002198:	4642      	mov	r2, r8
 800219a:	189b      	adds	r3, r3, r2
 800219c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021a0:	464b      	mov	r3, r9
 80021a2:	460a      	mov	r2, r1
 80021a4:	eb42 0303 	adc.w	r3, r2, r3
 80021a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80021ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80021b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	f04f 0300 	mov.w	r3, #0
 80021c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80021c4:	4649      	mov	r1, r9
 80021c6:	008b      	lsls	r3, r1, #2
 80021c8:	4641      	mov	r1, r8
 80021ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021ce:	4641      	mov	r1, r8
 80021d0:	008a      	lsls	r2, r1, #2
 80021d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80021d6:	f7fe f873 	bl	80002c0 <__aeabi_uldivmod>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4b39      	ldr	r3, [pc, #228]	; (80022c4 <UART_SetConfig+0x4e4>)
 80021e0:	fba3 1302 	umull	r1, r3, r3, r2
 80021e4:	095b      	lsrs	r3, r3, #5
 80021e6:	2164      	movs	r1, #100	; 0x64
 80021e8:	fb01 f303 	mul.w	r3, r1, r3
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	3332      	adds	r3, #50	; 0x32
 80021f2:	4a34      	ldr	r2, [pc, #208]	; (80022c4 <UART_SetConfig+0x4e4>)
 80021f4:	fba2 2303 	umull	r2, r3, r2, r3
 80021f8:	095b      	lsrs	r3, r3, #5
 80021fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021fe:	441c      	add	r4, r3
 8002200:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002204:	2200      	movs	r2, #0
 8002206:	673b      	str	r3, [r7, #112]	; 0x70
 8002208:	677a      	str	r2, [r7, #116]	; 0x74
 800220a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800220e:	4642      	mov	r2, r8
 8002210:	464b      	mov	r3, r9
 8002212:	1891      	adds	r1, r2, r2
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	415b      	adcs	r3, r3
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800221e:	4641      	mov	r1, r8
 8002220:	1851      	adds	r1, r2, r1
 8002222:	6039      	str	r1, [r7, #0]
 8002224:	4649      	mov	r1, r9
 8002226:	414b      	adcs	r3, r1
 8002228:	607b      	str	r3, [r7, #4]
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002236:	4659      	mov	r1, fp
 8002238:	00cb      	lsls	r3, r1, #3
 800223a:	4651      	mov	r1, sl
 800223c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002240:	4651      	mov	r1, sl
 8002242:	00ca      	lsls	r2, r1, #3
 8002244:	4610      	mov	r0, r2
 8002246:	4619      	mov	r1, r3
 8002248:	4603      	mov	r3, r0
 800224a:	4642      	mov	r2, r8
 800224c:	189b      	adds	r3, r3, r2
 800224e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002250:	464b      	mov	r3, r9
 8002252:	460a      	mov	r2, r1
 8002254:	eb42 0303 	adc.w	r3, r2, r3
 8002258:	66fb      	str	r3, [r7, #108]	; 0x6c
 800225a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	663b      	str	r3, [r7, #96]	; 0x60
 8002264:	667a      	str	r2, [r7, #100]	; 0x64
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002272:	4649      	mov	r1, r9
 8002274:	008b      	lsls	r3, r1, #2
 8002276:	4641      	mov	r1, r8
 8002278:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800227c:	4641      	mov	r1, r8
 800227e:	008a      	lsls	r2, r1, #2
 8002280:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002284:	f7fe f81c 	bl	80002c0 <__aeabi_uldivmod>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <UART_SetConfig+0x4e4>)
 800228e:	fba3 1302 	umull	r1, r3, r3, r2
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	2164      	movs	r1, #100	; 0x64
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	3332      	adds	r3, #50	; 0x32
 80022a0:	4a08      	ldr	r2, [pc, #32]	; (80022c4 <UART_SetConfig+0x4e4>)
 80022a2:	fba2 2303 	umull	r2, r3, r2, r3
 80022a6:	095b      	lsrs	r3, r3, #5
 80022a8:	f003 020f 	and.w	r2, r3, #15
 80022ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4422      	add	r2, r4
 80022b4:	609a      	str	r2, [r3, #8]
}
 80022b6:	bf00      	nop
 80022b8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80022bc:	46bd      	mov	sp, r7
 80022be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022c2:	bf00      	nop
 80022c4:	51eb851f 	.word	0x51eb851f

080022c8 <__errno>:
 80022c8:	4b01      	ldr	r3, [pc, #4]	; (80022d0 <__errno+0x8>)
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	2000000c 	.word	0x2000000c

080022d4 <__libc_init_array>:
 80022d4:	b570      	push	{r4, r5, r6, lr}
 80022d6:	4d0d      	ldr	r5, [pc, #52]	; (800230c <__libc_init_array+0x38>)
 80022d8:	4c0d      	ldr	r4, [pc, #52]	; (8002310 <__libc_init_array+0x3c>)
 80022da:	1b64      	subs	r4, r4, r5
 80022dc:	10a4      	asrs	r4, r4, #2
 80022de:	2600      	movs	r6, #0
 80022e0:	42a6      	cmp	r6, r4
 80022e2:	d109      	bne.n	80022f8 <__libc_init_array+0x24>
 80022e4:	4d0b      	ldr	r5, [pc, #44]	; (8002314 <__libc_init_array+0x40>)
 80022e6:	4c0c      	ldr	r4, [pc, #48]	; (8002318 <__libc_init_array+0x44>)
 80022e8:	f000 fc86 	bl	8002bf8 <_init>
 80022ec:	1b64      	subs	r4, r4, r5
 80022ee:	10a4      	asrs	r4, r4, #2
 80022f0:	2600      	movs	r6, #0
 80022f2:	42a6      	cmp	r6, r4
 80022f4:	d105      	bne.n	8002302 <__libc_init_array+0x2e>
 80022f6:	bd70      	pop	{r4, r5, r6, pc}
 80022f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80022fc:	4798      	blx	r3
 80022fe:	3601      	adds	r6, #1
 8002300:	e7ee      	b.n	80022e0 <__libc_init_array+0xc>
 8002302:	f855 3b04 	ldr.w	r3, [r5], #4
 8002306:	4798      	blx	r3
 8002308:	3601      	adds	r6, #1
 800230a:	e7f2      	b.n	80022f2 <__libc_init_array+0x1e>
 800230c:	08002ca8 	.word	0x08002ca8
 8002310:	08002ca8 	.word	0x08002ca8
 8002314:	08002ca8 	.word	0x08002ca8
 8002318:	08002cac 	.word	0x08002cac

0800231c <siprintf>:
 800231c:	b40e      	push	{r1, r2, r3}
 800231e:	b500      	push	{lr}
 8002320:	b09c      	sub	sp, #112	; 0x70
 8002322:	ab1d      	add	r3, sp, #116	; 0x74
 8002324:	9002      	str	r0, [sp, #8]
 8002326:	9006      	str	r0, [sp, #24]
 8002328:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800232c:	4809      	ldr	r0, [pc, #36]	; (8002354 <siprintf+0x38>)
 800232e:	9107      	str	r1, [sp, #28]
 8002330:	9104      	str	r1, [sp, #16]
 8002332:	4909      	ldr	r1, [pc, #36]	; (8002358 <siprintf+0x3c>)
 8002334:	f853 2b04 	ldr.w	r2, [r3], #4
 8002338:	9105      	str	r1, [sp, #20]
 800233a:	6800      	ldr	r0, [r0, #0]
 800233c:	9301      	str	r3, [sp, #4]
 800233e:	a902      	add	r1, sp, #8
 8002340:	f000 f868 	bl	8002414 <_svfiprintf_r>
 8002344:	9b02      	ldr	r3, [sp, #8]
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
 800234a:	b01c      	add	sp, #112	; 0x70
 800234c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002350:	b003      	add	sp, #12
 8002352:	4770      	bx	lr
 8002354:	2000000c 	.word	0x2000000c
 8002358:	ffff0208 	.word	0xffff0208

0800235c <__ssputs_r>:
 800235c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002360:	688e      	ldr	r6, [r1, #8]
 8002362:	429e      	cmp	r6, r3
 8002364:	4682      	mov	sl, r0
 8002366:	460c      	mov	r4, r1
 8002368:	4690      	mov	r8, r2
 800236a:	461f      	mov	r7, r3
 800236c:	d838      	bhi.n	80023e0 <__ssputs_r+0x84>
 800236e:	898a      	ldrh	r2, [r1, #12]
 8002370:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002374:	d032      	beq.n	80023dc <__ssputs_r+0x80>
 8002376:	6825      	ldr	r5, [r4, #0]
 8002378:	6909      	ldr	r1, [r1, #16]
 800237a:	eba5 0901 	sub.w	r9, r5, r1
 800237e:	6965      	ldr	r5, [r4, #20]
 8002380:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002384:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002388:	3301      	adds	r3, #1
 800238a:	444b      	add	r3, r9
 800238c:	106d      	asrs	r5, r5, #1
 800238e:	429d      	cmp	r5, r3
 8002390:	bf38      	it	cc
 8002392:	461d      	movcc	r5, r3
 8002394:	0553      	lsls	r3, r2, #21
 8002396:	d531      	bpl.n	80023fc <__ssputs_r+0xa0>
 8002398:	4629      	mov	r1, r5
 800239a:	f000 fb63 	bl	8002a64 <_malloc_r>
 800239e:	4606      	mov	r6, r0
 80023a0:	b950      	cbnz	r0, 80023b8 <__ssputs_r+0x5c>
 80023a2:	230c      	movs	r3, #12
 80023a4:	f8ca 3000 	str.w	r3, [sl]
 80023a8:	89a3      	ldrh	r3, [r4, #12]
 80023aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023ae:	81a3      	strh	r3, [r4, #12]
 80023b0:	f04f 30ff 	mov.w	r0, #4294967295
 80023b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023b8:	6921      	ldr	r1, [r4, #16]
 80023ba:	464a      	mov	r2, r9
 80023bc:	f000 fabe 	bl	800293c <memcpy>
 80023c0:	89a3      	ldrh	r3, [r4, #12]
 80023c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80023c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ca:	81a3      	strh	r3, [r4, #12]
 80023cc:	6126      	str	r6, [r4, #16]
 80023ce:	6165      	str	r5, [r4, #20]
 80023d0:	444e      	add	r6, r9
 80023d2:	eba5 0509 	sub.w	r5, r5, r9
 80023d6:	6026      	str	r6, [r4, #0]
 80023d8:	60a5      	str	r5, [r4, #8]
 80023da:	463e      	mov	r6, r7
 80023dc:	42be      	cmp	r6, r7
 80023de:	d900      	bls.n	80023e2 <__ssputs_r+0x86>
 80023e0:	463e      	mov	r6, r7
 80023e2:	6820      	ldr	r0, [r4, #0]
 80023e4:	4632      	mov	r2, r6
 80023e6:	4641      	mov	r1, r8
 80023e8:	f000 fab6 	bl	8002958 <memmove>
 80023ec:	68a3      	ldr	r3, [r4, #8]
 80023ee:	1b9b      	subs	r3, r3, r6
 80023f0:	60a3      	str	r3, [r4, #8]
 80023f2:	6823      	ldr	r3, [r4, #0]
 80023f4:	4433      	add	r3, r6
 80023f6:	6023      	str	r3, [r4, #0]
 80023f8:	2000      	movs	r0, #0
 80023fa:	e7db      	b.n	80023b4 <__ssputs_r+0x58>
 80023fc:	462a      	mov	r2, r5
 80023fe:	f000 fba5 	bl	8002b4c <_realloc_r>
 8002402:	4606      	mov	r6, r0
 8002404:	2800      	cmp	r0, #0
 8002406:	d1e1      	bne.n	80023cc <__ssputs_r+0x70>
 8002408:	6921      	ldr	r1, [r4, #16]
 800240a:	4650      	mov	r0, sl
 800240c:	f000 fabe 	bl	800298c <_free_r>
 8002410:	e7c7      	b.n	80023a2 <__ssputs_r+0x46>
	...

08002414 <_svfiprintf_r>:
 8002414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002418:	4698      	mov	r8, r3
 800241a:	898b      	ldrh	r3, [r1, #12]
 800241c:	061b      	lsls	r3, r3, #24
 800241e:	b09d      	sub	sp, #116	; 0x74
 8002420:	4607      	mov	r7, r0
 8002422:	460d      	mov	r5, r1
 8002424:	4614      	mov	r4, r2
 8002426:	d50e      	bpl.n	8002446 <_svfiprintf_r+0x32>
 8002428:	690b      	ldr	r3, [r1, #16]
 800242a:	b963      	cbnz	r3, 8002446 <_svfiprintf_r+0x32>
 800242c:	2140      	movs	r1, #64	; 0x40
 800242e:	f000 fb19 	bl	8002a64 <_malloc_r>
 8002432:	6028      	str	r0, [r5, #0]
 8002434:	6128      	str	r0, [r5, #16]
 8002436:	b920      	cbnz	r0, 8002442 <_svfiprintf_r+0x2e>
 8002438:	230c      	movs	r3, #12
 800243a:	603b      	str	r3, [r7, #0]
 800243c:	f04f 30ff 	mov.w	r0, #4294967295
 8002440:	e0d1      	b.n	80025e6 <_svfiprintf_r+0x1d2>
 8002442:	2340      	movs	r3, #64	; 0x40
 8002444:	616b      	str	r3, [r5, #20]
 8002446:	2300      	movs	r3, #0
 8002448:	9309      	str	r3, [sp, #36]	; 0x24
 800244a:	2320      	movs	r3, #32
 800244c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002450:	f8cd 800c 	str.w	r8, [sp, #12]
 8002454:	2330      	movs	r3, #48	; 0x30
 8002456:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002600 <_svfiprintf_r+0x1ec>
 800245a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800245e:	f04f 0901 	mov.w	r9, #1
 8002462:	4623      	mov	r3, r4
 8002464:	469a      	mov	sl, r3
 8002466:	f813 2b01 	ldrb.w	r2, [r3], #1
 800246a:	b10a      	cbz	r2, 8002470 <_svfiprintf_r+0x5c>
 800246c:	2a25      	cmp	r2, #37	; 0x25
 800246e:	d1f9      	bne.n	8002464 <_svfiprintf_r+0x50>
 8002470:	ebba 0b04 	subs.w	fp, sl, r4
 8002474:	d00b      	beq.n	800248e <_svfiprintf_r+0x7a>
 8002476:	465b      	mov	r3, fp
 8002478:	4622      	mov	r2, r4
 800247a:	4629      	mov	r1, r5
 800247c:	4638      	mov	r0, r7
 800247e:	f7ff ff6d 	bl	800235c <__ssputs_r>
 8002482:	3001      	adds	r0, #1
 8002484:	f000 80aa 	beq.w	80025dc <_svfiprintf_r+0x1c8>
 8002488:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800248a:	445a      	add	r2, fp
 800248c:	9209      	str	r2, [sp, #36]	; 0x24
 800248e:	f89a 3000 	ldrb.w	r3, [sl]
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 80a2 	beq.w	80025dc <_svfiprintf_r+0x1c8>
 8002498:	2300      	movs	r3, #0
 800249a:	f04f 32ff 	mov.w	r2, #4294967295
 800249e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80024a2:	f10a 0a01 	add.w	sl, sl, #1
 80024a6:	9304      	str	r3, [sp, #16]
 80024a8:	9307      	str	r3, [sp, #28]
 80024aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80024ae:	931a      	str	r3, [sp, #104]	; 0x68
 80024b0:	4654      	mov	r4, sl
 80024b2:	2205      	movs	r2, #5
 80024b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024b8:	4851      	ldr	r0, [pc, #324]	; (8002600 <_svfiprintf_r+0x1ec>)
 80024ba:	f7fd feb1 	bl	8000220 <memchr>
 80024be:	9a04      	ldr	r2, [sp, #16]
 80024c0:	b9d8      	cbnz	r0, 80024fa <_svfiprintf_r+0xe6>
 80024c2:	06d0      	lsls	r0, r2, #27
 80024c4:	bf44      	itt	mi
 80024c6:	2320      	movmi	r3, #32
 80024c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80024cc:	0711      	lsls	r1, r2, #28
 80024ce:	bf44      	itt	mi
 80024d0:	232b      	movmi	r3, #43	; 0x2b
 80024d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80024d6:	f89a 3000 	ldrb.w	r3, [sl]
 80024da:	2b2a      	cmp	r3, #42	; 0x2a
 80024dc:	d015      	beq.n	800250a <_svfiprintf_r+0xf6>
 80024de:	9a07      	ldr	r2, [sp, #28]
 80024e0:	4654      	mov	r4, sl
 80024e2:	2000      	movs	r0, #0
 80024e4:	f04f 0c0a 	mov.w	ip, #10
 80024e8:	4621      	mov	r1, r4
 80024ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80024ee:	3b30      	subs	r3, #48	; 0x30
 80024f0:	2b09      	cmp	r3, #9
 80024f2:	d94e      	bls.n	8002592 <_svfiprintf_r+0x17e>
 80024f4:	b1b0      	cbz	r0, 8002524 <_svfiprintf_r+0x110>
 80024f6:	9207      	str	r2, [sp, #28]
 80024f8:	e014      	b.n	8002524 <_svfiprintf_r+0x110>
 80024fa:	eba0 0308 	sub.w	r3, r0, r8
 80024fe:	fa09 f303 	lsl.w	r3, r9, r3
 8002502:	4313      	orrs	r3, r2
 8002504:	9304      	str	r3, [sp, #16]
 8002506:	46a2      	mov	sl, r4
 8002508:	e7d2      	b.n	80024b0 <_svfiprintf_r+0x9c>
 800250a:	9b03      	ldr	r3, [sp, #12]
 800250c:	1d19      	adds	r1, r3, #4
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	9103      	str	r1, [sp, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	bfbb      	ittet	lt
 8002516:	425b      	neglt	r3, r3
 8002518:	f042 0202 	orrlt.w	r2, r2, #2
 800251c:	9307      	strge	r3, [sp, #28]
 800251e:	9307      	strlt	r3, [sp, #28]
 8002520:	bfb8      	it	lt
 8002522:	9204      	strlt	r2, [sp, #16]
 8002524:	7823      	ldrb	r3, [r4, #0]
 8002526:	2b2e      	cmp	r3, #46	; 0x2e
 8002528:	d10c      	bne.n	8002544 <_svfiprintf_r+0x130>
 800252a:	7863      	ldrb	r3, [r4, #1]
 800252c:	2b2a      	cmp	r3, #42	; 0x2a
 800252e:	d135      	bne.n	800259c <_svfiprintf_r+0x188>
 8002530:	9b03      	ldr	r3, [sp, #12]
 8002532:	1d1a      	adds	r2, r3, #4
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	9203      	str	r2, [sp, #12]
 8002538:	2b00      	cmp	r3, #0
 800253a:	bfb8      	it	lt
 800253c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002540:	3402      	adds	r4, #2
 8002542:	9305      	str	r3, [sp, #20]
 8002544:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002610 <_svfiprintf_r+0x1fc>
 8002548:	7821      	ldrb	r1, [r4, #0]
 800254a:	2203      	movs	r2, #3
 800254c:	4650      	mov	r0, sl
 800254e:	f7fd fe67 	bl	8000220 <memchr>
 8002552:	b140      	cbz	r0, 8002566 <_svfiprintf_r+0x152>
 8002554:	2340      	movs	r3, #64	; 0x40
 8002556:	eba0 000a 	sub.w	r0, r0, sl
 800255a:	fa03 f000 	lsl.w	r0, r3, r0
 800255e:	9b04      	ldr	r3, [sp, #16]
 8002560:	4303      	orrs	r3, r0
 8002562:	3401      	adds	r4, #1
 8002564:	9304      	str	r3, [sp, #16]
 8002566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800256a:	4826      	ldr	r0, [pc, #152]	; (8002604 <_svfiprintf_r+0x1f0>)
 800256c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002570:	2206      	movs	r2, #6
 8002572:	f7fd fe55 	bl	8000220 <memchr>
 8002576:	2800      	cmp	r0, #0
 8002578:	d038      	beq.n	80025ec <_svfiprintf_r+0x1d8>
 800257a:	4b23      	ldr	r3, [pc, #140]	; (8002608 <_svfiprintf_r+0x1f4>)
 800257c:	bb1b      	cbnz	r3, 80025c6 <_svfiprintf_r+0x1b2>
 800257e:	9b03      	ldr	r3, [sp, #12]
 8002580:	3307      	adds	r3, #7
 8002582:	f023 0307 	bic.w	r3, r3, #7
 8002586:	3308      	adds	r3, #8
 8002588:	9303      	str	r3, [sp, #12]
 800258a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800258c:	4433      	add	r3, r6
 800258e:	9309      	str	r3, [sp, #36]	; 0x24
 8002590:	e767      	b.n	8002462 <_svfiprintf_r+0x4e>
 8002592:	fb0c 3202 	mla	r2, ip, r2, r3
 8002596:	460c      	mov	r4, r1
 8002598:	2001      	movs	r0, #1
 800259a:	e7a5      	b.n	80024e8 <_svfiprintf_r+0xd4>
 800259c:	2300      	movs	r3, #0
 800259e:	3401      	adds	r4, #1
 80025a0:	9305      	str	r3, [sp, #20]
 80025a2:	4619      	mov	r1, r3
 80025a4:	f04f 0c0a 	mov.w	ip, #10
 80025a8:	4620      	mov	r0, r4
 80025aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80025ae:	3a30      	subs	r2, #48	; 0x30
 80025b0:	2a09      	cmp	r2, #9
 80025b2:	d903      	bls.n	80025bc <_svfiprintf_r+0x1a8>
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0c5      	beq.n	8002544 <_svfiprintf_r+0x130>
 80025b8:	9105      	str	r1, [sp, #20]
 80025ba:	e7c3      	b.n	8002544 <_svfiprintf_r+0x130>
 80025bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80025c0:	4604      	mov	r4, r0
 80025c2:	2301      	movs	r3, #1
 80025c4:	e7f0      	b.n	80025a8 <_svfiprintf_r+0x194>
 80025c6:	ab03      	add	r3, sp, #12
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	462a      	mov	r2, r5
 80025cc:	4b0f      	ldr	r3, [pc, #60]	; (800260c <_svfiprintf_r+0x1f8>)
 80025ce:	a904      	add	r1, sp, #16
 80025d0:	4638      	mov	r0, r7
 80025d2:	f3af 8000 	nop.w
 80025d6:	1c42      	adds	r2, r0, #1
 80025d8:	4606      	mov	r6, r0
 80025da:	d1d6      	bne.n	800258a <_svfiprintf_r+0x176>
 80025dc:	89ab      	ldrh	r3, [r5, #12]
 80025de:	065b      	lsls	r3, r3, #25
 80025e0:	f53f af2c 	bmi.w	800243c <_svfiprintf_r+0x28>
 80025e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80025e6:	b01d      	add	sp, #116	; 0x74
 80025e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025ec:	ab03      	add	r3, sp, #12
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	462a      	mov	r2, r5
 80025f2:	4b06      	ldr	r3, [pc, #24]	; (800260c <_svfiprintf_r+0x1f8>)
 80025f4:	a904      	add	r1, sp, #16
 80025f6:	4638      	mov	r0, r7
 80025f8:	f000 f87a 	bl	80026f0 <_printf_i>
 80025fc:	e7eb      	b.n	80025d6 <_svfiprintf_r+0x1c2>
 80025fe:	bf00      	nop
 8002600:	08002c6c 	.word	0x08002c6c
 8002604:	08002c76 	.word	0x08002c76
 8002608:	00000000 	.word	0x00000000
 800260c:	0800235d 	.word	0x0800235d
 8002610:	08002c72 	.word	0x08002c72

08002614 <_printf_common>:
 8002614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002618:	4616      	mov	r6, r2
 800261a:	4699      	mov	r9, r3
 800261c:	688a      	ldr	r2, [r1, #8]
 800261e:	690b      	ldr	r3, [r1, #16]
 8002620:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002624:	4293      	cmp	r3, r2
 8002626:	bfb8      	it	lt
 8002628:	4613      	movlt	r3, r2
 800262a:	6033      	str	r3, [r6, #0]
 800262c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002630:	4607      	mov	r7, r0
 8002632:	460c      	mov	r4, r1
 8002634:	b10a      	cbz	r2, 800263a <_printf_common+0x26>
 8002636:	3301      	adds	r3, #1
 8002638:	6033      	str	r3, [r6, #0]
 800263a:	6823      	ldr	r3, [r4, #0]
 800263c:	0699      	lsls	r1, r3, #26
 800263e:	bf42      	ittt	mi
 8002640:	6833      	ldrmi	r3, [r6, #0]
 8002642:	3302      	addmi	r3, #2
 8002644:	6033      	strmi	r3, [r6, #0]
 8002646:	6825      	ldr	r5, [r4, #0]
 8002648:	f015 0506 	ands.w	r5, r5, #6
 800264c:	d106      	bne.n	800265c <_printf_common+0x48>
 800264e:	f104 0a19 	add.w	sl, r4, #25
 8002652:	68e3      	ldr	r3, [r4, #12]
 8002654:	6832      	ldr	r2, [r6, #0]
 8002656:	1a9b      	subs	r3, r3, r2
 8002658:	42ab      	cmp	r3, r5
 800265a:	dc26      	bgt.n	80026aa <_printf_common+0x96>
 800265c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002660:	1e13      	subs	r3, r2, #0
 8002662:	6822      	ldr	r2, [r4, #0]
 8002664:	bf18      	it	ne
 8002666:	2301      	movne	r3, #1
 8002668:	0692      	lsls	r2, r2, #26
 800266a:	d42b      	bmi.n	80026c4 <_printf_common+0xb0>
 800266c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002670:	4649      	mov	r1, r9
 8002672:	4638      	mov	r0, r7
 8002674:	47c0      	blx	r8
 8002676:	3001      	adds	r0, #1
 8002678:	d01e      	beq.n	80026b8 <_printf_common+0xa4>
 800267a:	6823      	ldr	r3, [r4, #0]
 800267c:	68e5      	ldr	r5, [r4, #12]
 800267e:	6832      	ldr	r2, [r6, #0]
 8002680:	f003 0306 	and.w	r3, r3, #6
 8002684:	2b04      	cmp	r3, #4
 8002686:	bf08      	it	eq
 8002688:	1aad      	subeq	r5, r5, r2
 800268a:	68a3      	ldr	r3, [r4, #8]
 800268c:	6922      	ldr	r2, [r4, #16]
 800268e:	bf0c      	ite	eq
 8002690:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002694:	2500      	movne	r5, #0
 8002696:	4293      	cmp	r3, r2
 8002698:	bfc4      	itt	gt
 800269a:	1a9b      	subgt	r3, r3, r2
 800269c:	18ed      	addgt	r5, r5, r3
 800269e:	2600      	movs	r6, #0
 80026a0:	341a      	adds	r4, #26
 80026a2:	42b5      	cmp	r5, r6
 80026a4:	d11a      	bne.n	80026dc <_printf_common+0xc8>
 80026a6:	2000      	movs	r0, #0
 80026a8:	e008      	b.n	80026bc <_printf_common+0xa8>
 80026aa:	2301      	movs	r3, #1
 80026ac:	4652      	mov	r2, sl
 80026ae:	4649      	mov	r1, r9
 80026b0:	4638      	mov	r0, r7
 80026b2:	47c0      	blx	r8
 80026b4:	3001      	adds	r0, #1
 80026b6:	d103      	bne.n	80026c0 <_printf_common+0xac>
 80026b8:	f04f 30ff 	mov.w	r0, #4294967295
 80026bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026c0:	3501      	adds	r5, #1
 80026c2:	e7c6      	b.n	8002652 <_printf_common+0x3e>
 80026c4:	18e1      	adds	r1, r4, r3
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	2030      	movs	r0, #48	; 0x30
 80026ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80026ce:	4422      	add	r2, r4
 80026d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80026d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80026d8:	3302      	adds	r3, #2
 80026da:	e7c7      	b.n	800266c <_printf_common+0x58>
 80026dc:	2301      	movs	r3, #1
 80026de:	4622      	mov	r2, r4
 80026e0:	4649      	mov	r1, r9
 80026e2:	4638      	mov	r0, r7
 80026e4:	47c0      	blx	r8
 80026e6:	3001      	adds	r0, #1
 80026e8:	d0e6      	beq.n	80026b8 <_printf_common+0xa4>
 80026ea:	3601      	adds	r6, #1
 80026ec:	e7d9      	b.n	80026a2 <_printf_common+0x8e>
	...

080026f0 <_printf_i>:
 80026f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80026f4:	7e0f      	ldrb	r7, [r1, #24]
 80026f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80026f8:	2f78      	cmp	r7, #120	; 0x78
 80026fa:	4691      	mov	r9, r2
 80026fc:	4680      	mov	r8, r0
 80026fe:	460c      	mov	r4, r1
 8002700:	469a      	mov	sl, r3
 8002702:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002706:	d807      	bhi.n	8002718 <_printf_i+0x28>
 8002708:	2f62      	cmp	r7, #98	; 0x62
 800270a:	d80a      	bhi.n	8002722 <_printf_i+0x32>
 800270c:	2f00      	cmp	r7, #0
 800270e:	f000 80d8 	beq.w	80028c2 <_printf_i+0x1d2>
 8002712:	2f58      	cmp	r7, #88	; 0x58
 8002714:	f000 80a3 	beq.w	800285e <_printf_i+0x16e>
 8002718:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800271c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002720:	e03a      	b.n	8002798 <_printf_i+0xa8>
 8002722:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002726:	2b15      	cmp	r3, #21
 8002728:	d8f6      	bhi.n	8002718 <_printf_i+0x28>
 800272a:	a101      	add	r1, pc, #4	; (adr r1, 8002730 <_printf_i+0x40>)
 800272c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002730:	08002789 	.word	0x08002789
 8002734:	0800279d 	.word	0x0800279d
 8002738:	08002719 	.word	0x08002719
 800273c:	08002719 	.word	0x08002719
 8002740:	08002719 	.word	0x08002719
 8002744:	08002719 	.word	0x08002719
 8002748:	0800279d 	.word	0x0800279d
 800274c:	08002719 	.word	0x08002719
 8002750:	08002719 	.word	0x08002719
 8002754:	08002719 	.word	0x08002719
 8002758:	08002719 	.word	0x08002719
 800275c:	080028a9 	.word	0x080028a9
 8002760:	080027cd 	.word	0x080027cd
 8002764:	0800288b 	.word	0x0800288b
 8002768:	08002719 	.word	0x08002719
 800276c:	08002719 	.word	0x08002719
 8002770:	080028cb 	.word	0x080028cb
 8002774:	08002719 	.word	0x08002719
 8002778:	080027cd 	.word	0x080027cd
 800277c:	08002719 	.word	0x08002719
 8002780:	08002719 	.word	0x08002719
 8002784:	08002893 	.word	0x08002893
 8002788:	682b      	ldr	r3, [r5, #0]
 800278a:	1d1a      	adds	r2, r3, #4
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	602a      	str	r2, [r5, #0]
 8002790:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002794:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002798:	2301      	movs	r3, #1
 800279a:	e0a3      	b.n	80028e4 <_printf_i+0x1f4>
 800279c:	6820      	ldr	r0, [r4, #0]
 800279e:	6829      	ldr	r1, [r5, #0]
 80027a0:	0606      	lsls	r6, r0, #24
 80027a2:	f101 0304 	add.w	r3, r1, #4
 80027a6:	d50a      	bpl.n	80027be <_printf_i+0xce>
 80027a8:	680e      	ldr	r6, [r1, #0]
 80027aa:	602b      	str	r3, [r5, #0]
 80027ac:	2e00      	cmp	r6, #0
 80027ae:	da03      	bge.n	80027b8 <_printf_i+0xc8>
 80027b0:	232d      	movs	r3, #45	; 0x2d
 80027b2:	4276      	negs	r6, r6
 80027b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027b8:	485e      	ldr	r0, [pc, #376]	; (8002934 <_printf_i+0x244>)
 80027ba:	230a      	movs	r3, #10
 80027bc:	e019      	b.n	80027f2 <_printf_i+0x102>
 80027be:	680e      	ldr	r6, [r1, #0]
 80027c0:	602b      	str	r3, [r5, #0]
 80027c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80027c6:	bf18      	it	ne
 80027c8:	b236      	sxthne	r6, r6
 80027ca:	e7ef      	b.n	80027ac <_printf_i+0xbc>
 80027cc:	682b      	ldr	r3, [r5, #0]
 80027ce:	6820      	ldr	r0, [r4, #0]
 80027d0:	1d19      	adds	r1, r3, #4
 80027d2:	6029      	str	r1, [r5, #0]
 80027d4:	0601      	lsls	r1, r0, #24
 80027d6:	d501      	bpl.n	80027dc <_printf_i+0xec>
 80027d8:	681e      	ldr	r6, [r3, #0]
 80027da:	e002      	b.n	80027e2 <_printf_i+0xf2>
 80027dc:	0646      	lsls	r6, r0, #25
 80027de:	d5fb      	bpl.n	80027d8 <_printf_i+0xe8>
 80027e0:	881e      	ldrh	r6, [r3, #0]
 80027e2:	4854      	ldr	r0, [pc, #336]	; (8002934 <_printf_i+0x244>)
 80027e4:	2f6f      	cmp	r7, #111	; 0x6f
 80027e6:	bf0c      	ite	eq
 80027e8:	2308      	moveq	r3, #8
 80027ea:	230a      	movne	r3, #10
 80027ec:	2100      	movs	r1, #0
 80027ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80027f2:	6865      	ldr	r5, [r4, #4]
 80027f4:	60a5      	str	r5, [r4, #8]
 80027f6:	2d00      	cmp	r5, #0
 80027f8:	bfa2      	ittt	ge
 80027fa:	6821      	ldrge	r1, [r4, #0]
 80027fc:	f021 0104 	bicge.w	r1, r1, #4
 8002800:	6021      	strge	r1, [r4, #0]
 8002802:	b90e      	cbnz	r6, 8002808 <_printf_i+0x118>
 8002804:	2d00      	cmp	r5, #0
 8002806:	d04d      	beq.n	80028a4 <_printf_i+0x1b4>
 8002808:	4615      	mov	r5, r2
 800280a:	fbb6 f1f3 	udiv	r1, r6, r3
 800280e:	fb03 6711 	mls	r7, r3, r1, r6
 8002812:	5dc7      	ldrb	r7, [r0, r7]
 8002814:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002818:	4637      	mov	r7, r6
 800281a:	42bb      	cmp	r3, r7
 800281c:	460e      	mov	r6, r1
 800281e:	d9f4      	bls.n	800280a <_printf_i+0x11a>
 8002820:	2b08      	cmp	r3, #8
 8002822:	d10b      	bne.n	800283c <_printf_i+0x14c>
 8002824:	6823      	ldr	r3, [r4, #0]
 8002826:	07de      	lsls	r6, r3, #31
 8002828:	d508      	bpl.n	800283c <_printf_i+0x14c>
 800282a:	6923      	ldr	r3, [r4, #16]
 800282c:	6861      	ldr	r1, [r4, #4]
 800282e:	4299      	cmp	r1, r3
 8002830:	bfde      	ittt	le
 8002832:	2330      	movle	r3, #48	; 0x30
 8002834:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002838:	f105 35ff 	addle.w	r5, r5, #4294967295
 800283c:	1b52      	subs	r2, r2, r5
 800283e:	6122      	str	r2, [r4, #16]
 8002840:	f8cd a000 	str.w	sl, [sp]
 8002844:	464b      	mov	r3, r9
 8002846:	aa03      	add	r2, sp, #12
 8002848:	4621      	mov	r1, r4
 800284a:	4640      	mov	r0, r8
 800284c:	f7ff fee2 	bl	8002614 <_printf_common>
 8002850:	3001      	adds	r0, #1
 8002852:	d14c      	bne.n	80028ee <_printf_i+0x1fe>
 8002854:	f04f 30ff 	mov.w	r0, #4294967295
 8002858:	b004      	add	sp, #16
 800285a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800285e:	4835      	ldr	r0, [pc, #212]	; (8002934 <_printf_i+0x244>)
 8002860:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002864:	6829      	ldr	r1, [r5, #0]
 8002866:	6823      	ldr	r3, [r4, #0]
 8002868:	f851 6b04 	ldr.w	r6, [r1], #4
 800286c:	6029      	str	r1, [r5, #0]
 800286e:	061d      	lsls	r5, r3, #24
 8002870:	d514      	bpl.n	800289c <_printf_i+0x1ac>
 8002872:	07df      	lsls	r7, r3, #31
 8002874:	bf44      	itt	mi
 8002876:	f043 0320 	orrmi.w	r3, r3, #32
 800287a:	6023      	strmi	r3, [r4, #0]
 800287c:	b91e      	cbnz	r6, 8002886 <_printf_i+0x196>
 800287e:	6823      	ldr	r3, [r4, #0]
 8002880:	f023 0320 	bic.w	r3, r3, #32
 8002884:	6023      	str	r3, [r4, #0]
 8002886:	2310      	movs	r3, #16
 8002888:	e7b0      	b.n	80027ec <_printf_i+0xfc>
 800288a:	6823      	ldr	r3, [r4, #0]
 800288c:	f043 0320 	orr.w	r3, r3, #32
 8002890:	6023      	str	r3, [r4, #0]
 8002892:	2378      	movs	r3, #120	; 0x78
 8002894:	4828      	ldr	r0, [pc, #160]	; (8002938 <_printf_i+0x248>)
 8002896:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800289a:	e7e3      	b.n	8002864 <_printf_i+0x174>
 800289c:	0659      	lsls	r1, r3, #25
 800289e:	bf48      	it	mi
 80028a0:	b2b6      	uxthmi	r6, r6
 80028a2:	e7e6      	b.n	8002872 <_printf_i+0x182>
 80028a4:	4615      	mov	r5, r2
 80028a6:	e7bb      	b.n	8002820 <_printf_i+0x130>
 80028a8:	682b      	ldr	r3, [r5, #0]
 80028aa:	6826      	ldr	r6, [r4, #0]
 80028ac:	6961      	ldr	r1, [r4, #20]
 80028ae:	1d18      	adds	r0, r3, #4
 80028b0:	6028      	str	r0, [r5, #0]
 80028b2:	0635      	lsls	r5, r6, #24
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	d501      	bpl.n	80028bc <_printf_i+0x1cc>
 80028b8:	6019      	str	r1, [r3, #0]
 80028ba:	e002      	b.n	80028c2 <_printf_i+0x1d2>
 80028bc:	0670      	lsls	r0, r6, #25
 80028be:	d5fb      	bpl.n	80028b8 <_printf_i+0x1c8>
 80028c0:	8019      	strh	r1, [r3, #0]
 80028c2:	2300      	movs	r3, #0
 80028c4:	6123      	str	r3, [r4, #16]
 80028c6:	4615      	mov	r5, r2
 80028c8:	e7ba      	b.n	8002840 <_printf_i+0x150>
 80028ca:	682b      	ldr	r3, [r5, #0]
 80028cc:	1d1a      	adds	r2, r3, #4
 80028ce:	602a      	str	r2, [r5, #0]
 80028d0:	681d      	ldr	r5, [r3, #0]
 80028d2:	6862      	ldr	r2, [r4, #4]
 80028d4:	2100      	movs	r1, #0
 80028d6:	4628      	mov	r0, r5
 80028d8:	f7fd fca2 	bl	8000220 <memchr>
 80028dc:	b108      	cbz	r0, 80028e2 <_printf_i+0x1f2>
 80028de:	1b40      	subs	r0, r0, r5
 80028e0:	6060      	str	r0, [r4, #4]
 80028e2:	6863      	ldr	r3, [r4, #4]
 80028e4:	6123      	str	r3, [r4, #16]
 80028e6:	2300      	movs	r3, #0
 80028e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028ec:	e7a8      	b.n	8002840 <_printf_i+0x150>
 80028ee:	6923      	ldr	r3, [r4, #16]
 80028f0:	462a      	mov	r2, r5
 80028f2:	4649      	mov	r1, r9
 80028f4:	4640      	mov	r0, r8
 80028f6:	47d0      	blx	sl
 80028f8:	3001      	adds	r0, #1
 80028fa:	d0ab      	beq.n	8002854 <_printf_i+0x164>
 80028fc:	6823      	ldr	r3, [r4, #0]
 80028fe:	079b      	lsls	r3, r3, #30
 8002900:	d413      	bmi.n	800292a <_printf_i+0x23a>
 8002902:	68e0      	ldr	r0, [r4, #12]
 8002904:	9b03      	ldr	r3, [sp, #12]
 8002906:	4298      	cmp	r0, r3
 8002908:	bfb8      	it	lt
 800290a:	4618      	movlt	r0, r3
 800290c:	e7a4      	b.n	8002858 <_printf_i+0x168>
 800290e:	2301      	movs	r3, #1
 8002910:	4632      	mov	r2, r6
 8002912:	4649      	mov	r1, r9
 8002914:	4640      	mov	r0, r8
 8002916:	47d0      	blx	sl
 8002918:	3001      	adds	r0, #1
 800291a:	d09b      	beq.n	8002854 <_printf_i+0x164>
 800291c:	3501      	adds	r5, #1
 800291e:	68e3      	ldr	r3, [r4, #12]
 8002920:	9903      	ldr	r1, [sp, #12]
 8002922:	1a5b      	subs	r3, r3, r1
 8002924:	42ab      	cmp	r3, r5
 8002926:	dcf2      	bgt.n	800290e <_printf_i+0x21e>
 8002928:	e7eb      	b.n	8002902 <_printf_i+0x212>
 800292a:	2500      	movs	r5, #0
 800292c:	f104 0619 	add.w	r6, r4, #25
 8002930:	e7f5      	b.n	800291e <_printf_i+0x22e>
 8002932:	bf00      	nop
 8002934:	08002c7d 	.word	0x08002c7d
 8002938:	08002c8e 	.word	0x08002c8e

0800293c <memcpy>:
 800293c:	440a      	add	r2, r1
 800293e:	4291      	cmp	r1, r2
 8002940:	f100 33ff 	add.w	r3, r0, #4294967295
 8002944:	d100      	bne.n	8002948 <memcpy+0xc>
 8002946:	4770      	bx	lr
 8002948:	b510      	push	{r4, lr}
 800294a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800294e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002952:	4291      	cmp	r1, r2
 8002954:	d1f9      	bne.n	800294a <memcpy+0xe>
 8002956:	bd10      	pop	{r4, pc}

08002958 <memmove>:
 8002958:	4288      	cmp	r0, r1
 800295a:	b510      	push	{r4, lr}
 800295c:	eb01 0402 	add.w	r4, r1, r2
 8002960:	d902      	bls.n	8002968 <memmove+0x10>
 8002962:	4284      	cmp	r4, r0
 8002964:	4623      	mov	r3, r4
 8002966:	d807      	bhi.n	8002978 <memmove+0x20>
 8002968:	1e43      	subs	r3, r0, #1
 800296a:	42a1      	cmp	r1, r4
 800296c:	d008      	beq.n	8002980 <memmove+0x28>
 800296e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002972:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002976:	e7f8      	b.n	800296a <memmove+0x12>
 8002978:	4402      	add	r2, r0
 800297a:	4601      	mov	r1, r0
 800297c:	428a      	cmp	r2, r1
 800297e:	d100      	bne.n	8002982 <memmove+0x2a>
 8002980:	bd10      	pop	{r4, pc}
 8002982:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002986:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800298a:	e7f7      	b.n	800297c <memmove+0x24>

0800298c <_free_r>:
 800298c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800298e:	2900      	cmp	r1, #0
 8002990:	d044      	beq.n	8002a1c <_free_r+0x90>
 8002992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002996:	9001      	str	r0, [sp, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	f1a1 0404 	sub.w	r4, r1, #4
 800299e:	bfb8      	it	lt
 80029a0:	18e4      	addlt	r4, r4, r3
 80029a2:	f000 f913 	bl	8002bcc <__malloc_lock>
 80029a6:	4a1e      	ldr	r2, [pc, #120]	; (8002a20 <_free_r+0x94>)
 80029a8:	9801      	ldr	r0, [sp, #4]
 80029aa:	6813      	ldr	r3, [r2, #0]
 80029ac:	b933      	cbnz	r3, 80029bc <_free_r+0x30>
 80029ae:	6063      	str	r3, [r4, #4]
 80029b0:	6014      	str	r4, [r2, #0]
 80029b2:	b003      	add	sp, #12
 80029b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80029b8:	f000 b90e 	b.w	8002bd8 <__malloc_unlock>
 80029bc:	42a3      	cmp	r3, r4
 80029be:	d908      	bls.n	80029d2 <_free_r+0x46>
 80029c0:	6825      	ldr	r5, [r4, #0]
 80029c2:	1961      	adds	r1, r4, r5
 80029c4:	428b      	cmp	r3, r1
 80029c6:	bf01      	itttt	eq
 80029c8:	6819      	ldreq	r1, [r3, #0]
 80029ca:	685b      	ldreq	r3, [r3, #4]
 80029cc:	1949      	addeq	r1, r1, r5
 80029ce:	6021      	streq	r1, [r4, #0]
 80029d0:	e7ed      	b.n	80029ae <_free_r+0x22>
 80029d2:	461a      	mov	r2, r3
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	b10b      	cbz	r3, 80029dc <_free_r+0x50>
 80029d8:	42a3      	cmp	r3, r4
 80029da:	d9fa      	bls.n	80029d2 <_free_r+0x46>
 80029dc:	6811      	ldr	r1, [r2, #0]
 80029de:	1855      	adds	r5, r2, r1
 80029e0:	42a5      	cmp	r5, r4
 80029e2:	d10b      	bne.n	80029fc <_free_r+0x70>
 80029e4:	6824      	ldr	r4, [r4, #0]
 80029e6:	4421      	add	r1, r4
 80029e8:	1854      	adds	r4, r2, r1
 80029ea:	42a3      	cmp	r3, r4
 80029ec:	6011      	str	r1, [r2, #0]
 80029ee:	d1e0      	bne.n	80029b2 <_free_r+0x26>
 80029f0:	681c      	ldr	r4, [r3, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	6053      	str	r3, [r2, #4]
 80029f6:	4421      	add	r1, r4
 80029f8:	6011      	str	r1, [r2, #0]
 80029fa:	e7da      	b.n	80029b2 <_free_r+0x26>
 80029fc:	d902      	bls.n	8002a04 <_free_r+0x78>
 80029fe:	230c      	movs	r3, #12
 8002a00:	6003      	str	r3, [r0, #0]
 8002a02:	e7d6      	b.n	80029b2 <_free_r+0x26>
 8002a04:	6825      	ldr	r5, [r4, #0]
 8002a06:	1961      	adds	r1, r4, r5
 8002a08:	428b      	cmp	r3, r1
 8002a0a:	bf04      	itt	eq
 8002a0c:	6819      	ldreq	r1, [r3, #0]
 8002a0e:	685b      	ldreq	r3, [r3, #4]
 8002a10:	6063      	str	r3, [r4, #4]
 8002a12:	bf04      	itt	eq
 8002a14:	1949      	addeq	r1, r1, r5
 8002a16:	6021      	streq	r1, [r4, #0]
 8002a18:	6054      	str	r4, [r2, #4]
 8002a1a:	e7ca      	b.n	80029b2 <_free_r+0x26>
 8002a1c:	b003      	add	sp, #12
 8002a1e:	bd30      	pop	{r4, r5, pc}
 8002a20:	20000134 	.word	0x20000134

08002a24 <sbrk_aligned>:
 8002a24:	b570      	push	{r4, r5, r6, lr}
 8002a26:	4e0e      	ldr	r6, [pc, #56]	; (8002a60 <sbrk_aligned+0x3c>)
 8002a28:	460c      	mov	r4, r1
 8002a2a:	6831      	ldr	r1, [r6, #0]
 8002a2c:	4605      	mov	r5, r0
 8002a2e:	b911      	cbnz	r1, 8002a36 <sbrk_aligned+0x12>
 8002a30:	f000 f8bc 	bl	8002bac <_sbrk_r>
 8002a34:	6030      	str	r0, [r6, #0]
 8002a36:	4621      	mov	r1, r4
 8002a38:	4628      	mov	r0, r5
 8002a3a:	f000 f8b7 	bl	8002bac <_sbrk_r>
 8002a3e:	1c43      	adds	r3, r0, #1
 8002a40:	d00a      	beq.n	8002a58 <sbrk_aligned+0x34>
 8002a42:	1cc4      	adds	r4, r0, #3
 8002a44:	f024 0403 	bic.w	r4, r4, #3
 8002a48:	42a0      	cmp	r0, r4
 8002a4a:	d007      	beq.n	8002a5c <sbrk_aligned+0x38>
 8002a4c:	1a21      	subs	r1, r4, r0
 8002a4e:	4628      	mov	r0, r5
 8002a50:	f000 f8ac 	bl	8002bac <_sbrk_r>
 8002a54:	3001      	adds	r0, #1
 8002a56:	d101      	bne.n	8002a5c <sbrk_aligned+0x38>
 8002a58:	f04f 34ff 	mov.w	r4, #4294967295
 8002a5c:	4620      	mov	r0, r4
 8002a5e:	bd70      	pop	{r4, r5, r6, pc}
 8002a60:	20000138 	.word	0x20000138

08002a64 <_malloc_r>:
 8002a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a68:	1ccd      	adds	r5, r1, #3
 8002a6a:	f025 0503 	bic.w	r5, r5, #3
 8002a6e:	3508      	adds	r5, #8
 8002a70:	2d0c      	cmp	r5, #12
 8002a72:	bf38      	it	cc
 8002a74:	250c      	movcc	r5, #12
 8002a76:	2d00      	cmp	r5, #0
 8002a78:	4607      	mov	r7, r0
 8002a7a:	db01      	blt.n	8002a80 <_malloc_r+0x1c>
 8002a7c:	42a9      	cmp	r1, r5
 8002a7e:	d905      	bls.n	8002a8c <_malloc_r+0x28>
 8002a80:	230c      	movs	r3, #12
 8002a82:	603b      	str	r3, [r7, #0]
 8002a84:	2600      	movs	r6, #0
 8002a86:	4630      	mov	r0, r6
 8002a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a8c:	4e2e      	ldr	r6, [pc, #184]	; (8002b48 <_malloc_r+0xe4>)
 8002a8e:	f000 f89d 	bl	8002bcc <__malloc_lock>
 8002a92:	6833      	ldr	r3, [r6, #0]
 8002a94:	461c      	mov	r4, r3
 8002a96:	bb34      	cbnz	r4, 8002ae6 <_malloc_r+0x82>
 8002a98:	4629      	mov	r1, r5
 8002a9a:	4638      	mov	r0, r7
 8002a9c:	f7ff ffc2 	bl	8002a24 <sbrk_aligned>
 8002aa0:	1c43      	adds	r3, r0, #1
 8002aa2:	4604      	mov	r4, r0
 8002aa4:	d14d      	bne.n	8002b42 <_malloc_r+0xde>
 8002aa6:	6834      	ldr	r4, [r6, #0]
 8002aa8:	4626      	mov	r6, r4
 8002aaa:	2e00      	cmp	r6, #0
 8002aac:	d140      	bne.n	8002b30 <_malloc_r+0xcc>
 8002aae:	6823      	ldr	r3, [r4, #0]
 8002ab0:	4631      	mov	r1, r6
 8002ab2:	4638      	mov	r0, r7
 8002ab4:	eb04 0803 	add.w	r8, r4, r3
 8002ab8:	f000 f878 	bl	8002bac <_sbrk_r>
 8002abc:	4580      	cmp	r8, r0
 8002abe:	d13a      	bne.n	8002b36 <_malloc_r+0xd2>
 8002ac0:	6821      	ldr	r1, [r4, #0]
 8002ac2:	3503      	adds	r5, #3
 8002ac4:	1a6d      	subs	r5, r5, r1
 8002ac6:	f025 0503 	bic.w	r5, r5, #3
 8002aca:	3508      	adds	r5, #8
 8002acc:	2d0c      	cmp	r5, #12
 8002ace:	bf38      	it	cc
 8002ad0:	250c      	movcc	r5, #12
 8002ad2:	4629      	mov	r1, r5
 8002ad4:	4638      	mov	r0, r7
 8002ad6:	f7ff ffa5 	bl	8002a24 <sbrk_aligned>
 8002ada:	3001      	adds	r0, #1
 8002adc:	d02b      	beq.n	8002b36 <_malloc_r+0xd2>
 8002ade:	6823      	ldr	r3, [r4, #0]
 8002ae0:	442b      	add	r3, r5
 8002ae2:	6023      	str	r3, [r4, #0]
 8002ae4:	e00e      	b.n	8002b04 <_malloc_r+0xa0>
 8002ae6:	6822      	ldr	r2, [r4, #0]
 8002ae8:	1b52      	subs	r2, r2, r5
 8002aea:	d41e      	bmi.n	8002b2a <_malloc_r+0xc6>
 8002aec:	2a0b      	cmp	r2, #11
 8002aee:	d916      	bls.n	8002b1e <_malloc_r+0xba>
 8002af0:	1961      	adds	r1, r4, r5
 8002af2:	42a3      	cmp	r3, r4
 8002af4:	6025      	str	r5, [r4, #0]
 8002af6:	bf18      	it	ne
 8002af8:	6059      	strne	r1, [r3, #4]
 8002afa:	6863      	ldr	r3, [r4, #4]
 8002afc:	bf08      	it	eq
 8002afe:	6031      	streq	r1, [r6, #0]
 8002b00:	5162      	str	r2, [r4, r5]
 8002b02:	604b      	str	r3, [r1, #4]
 8002b04:	4638      	mov	r0, r7
 8002b06:	f104 060b 	add.w	r6, r4, #11
 8002b0a:	f000 f865 	bl	8002bd8 <__malloc_unlock>
 8002b0e:	f026 0607 	bic.w	r6, r6, #7
 8002b12:	1d23      	adds	r3, r4, #4
 8002b14:	1af2      	subs	r2, r6, r3
 8002b16:	d0b6      	beq.n	8002a86 <_malloc_r+0x22>
 8002b18:	1b9b      	subs	r3, r3, r6
 8002b1a:	50a3      	str	r3, [r4, r2]
 8002b1c:	e7b3      	b.n	8002a86 <_malloc_r+0x22>
 8002b1e:	6862      	ldr	r2, [r4, #4]
 8002b20:	42a3      	cmp	r3, r4
 8002b22:	bf0c      	ite	eq
 8002b24:	6032      	streq	r2, [r6, #0]
 8002b26:	605a      	strne	r2, [r3, #4]
 8002b28:	e7ec      	b.n	8002b04 <_malloc_r+0xa0>
 8002b2a:	4623      	mov	r3, r4
 8002b2c:	6864      	ldr	r4, [r4, #4]
 8002b2e:	e7b2      	b.n	8002a96 <_malloc_r+0x32>
 8002b30:	4634      	mov	r4, r6
 8002b32:	6876      	ldr	r6, [r6, #4]
 8002b34:	e7b9      	b.n	8002aaa <_malloc_r+0x46>
 8002b36:	230c      	movs	r3, #12
 8002b38:	603b      	str	r3, [r7, #0]
 8002b3a:	4638      	mov	r0, r7
 8002b3c:	f000 f84c 	bl	8002bd8 <__malloc_unlock>
 8002b40:	e7a1      	b.n	8002a86 <_malloc_r+0x22>
 8002b42:	6025      	str	r5, [r4, #0]
 8002b44:	e7de      	b.n	8002b04 <_malloc_r+0xa0>
 8002b46:	bf00      	nop
 8002b48:	20000134 	.word	0x20000134

08002b4c <_realloc_r>:
 8002b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b50:	4680      	mov	r8, r0
 8002b52:	4614      	mov	r4, r2
 8002b54:	460e      	mov	r6, r1
 8002b56:	b921      	cbnz	r1, 8002b62 <_realloc_r+0x16>
 8002b58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b5c:	4611      	mov	r1, r2
 8002b5e:	f7ff bf81 	b.w	8002a64 <_malloc_r>
 8002b62:	b92a      	cbnz	r2, 8002b70 <_realloc_r+0x24>
 8002b64:	f7ff ff12 	bl	800298c <_free_r>
 8002b68:	4625      	mov	r5, r4
 8002b6a:	4628      	mov	r0, r5
 8002b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b70:	f000 f838 	bl	8002be4 <_malloc_usable_size_r>
 8002b74:	4284      	cmp	r4, r0
 8002b76:	4607      	mov	r7, r0
 8002b78:	d802      	bhi.n	8002b80 <_realloc_r+0x34>
 8002b7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002b7e:	d812      	bhi.n	8002ba6 <_realloc_r+0x5a>
 8002b80:	4621      	mov	r1, r4
 8002b82:	4640      	mov	r0, r8
 8002b84:	f7ff ff6e 	bl	8002a64 <_malloc_r>
 8002b88:	4605      	mov	r5, r0
 8002b8a:	2800      	cmp	r0, #0
 8002b8c:	d0ed      	beq.n	8002b6a <_realloc_r+0x1e>
 8002b8e:	42bc      	cmp	r4, r7
 8002b90:	4622      	mov	r2, r4
 8002b92:	4631      	mov	r1, r6
 8002b94:	bf28      	it	cs
 8002b96:	463a      	movcs	r2, r7
 8002b98:	f7ff fed0 	bl	800293c <memcpy>
 8002b9c:	4631      	mov	r1, r6
 8002b9e:	4640      	mov	r0, r8
 8002ba0:	f7ff fef4 	bl	800298c <_free_r>
 8002ba4:	e7e1      	b.n	8002b6a <_realloc_r+0x1e>
 8002ba6:	4635      	mov	r5, r6
 8002ba8:	e7df      	b.n	8002b6a <_realloc_r+0x1e>
	...

08002bac <_sbrk_r>:
 8002bac:	b538      	push	{r3, r4, r5, lr}
 8002bae:	4d06      	ldr	r5, [pc, #24]	; (8002bc8 <_sbrk_r+0x1c>)
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	4604      	mov	r4, r0
 8002bb4:	4608      	mov	r0, r1
 8002bb6:	602b      	str	r3, [r5, #0]
 8002bb8:	f7fd fe46 	bl	8000848 <_sbrk>
 8002bbc:	1c43      	adds	r3, r0, #1
 8002bbe:	d102      	bne.n	8002bc6 <_sbrk_r+0x1a>
 8002bc0:	682b      	ldr	r3, [r5, #0]
 8002bc2:	b103      	cbz	r3, 8002bc6 <_sbrk_r+0x1a>
 8002bc4:	6023      	str	r3, [r4, #0]
 8002bc6:	bd38      	pop	{r3, r4, r5, pc}
 8002bc8:	2000013c 	.word	0x2000013c

08002bcc <__malloc_lock>:
 8002bcc:	4801      	ldr	r0, [pc, #4]	; (8002bd4 <__malloc_lock+0x8>)
 8002bce:	f000 b811 	b.w	8002bf4 <__retarget_lock_acquire_recursive>
 8002bd2:	bf00      	nop
 8002bd4:	20000140 	.word	0x20000140

08002bd8 <__malloc_unlock>:
 8002bd8:	4801      	ldr	r0, [pc, #4]	; (8002be0 <__malloc_unlock+0x8>)
 8002bda:	f000 b80c 	b.w	8002bf6 <__retarget_lock_release_recursive>
 8002bde:	bf00      	nop
 8002be0:	20000140 	.word	0x20000140

08002be4 <_malloc_usable_size_r>:
 8002be4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002be8:	1f18      	subs	r0, r3, #4
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	bfbc      	itt	lt
 8002bee:	580b      	ldrlt	r3, [r1, r0]
 8002bf0:	18c0      	addlt	r0, r0, r3
 8002bf2:	4770      	bx	lr

08002bf4 <__retarget_lock_acquire_recursive>:
 8002bf4:	4770      	bx	lr

08002bf6 <__retarget_lock_release_recursive>:
 8002bf6:	4770      	bx	lr

08002bf8 <_init>:
 8002bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfa:	bf00      	nop
 8002bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bfe:	bc08      	pop	{r3}
 8002c00:	469e      	mov	lr, r3
 8002c02:	4770      	bx	lr

08002c04 <_fini>:
 8002c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c06:	bf00      	nop
 8002c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c0a:	bc08      	pop	{r3}
 8002c0c:	469e      	mov	lr, r3
 8002c0e:	4770      	bx	lr
