
Task_Schedular.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fb8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800117c  0800117c  0001117c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001230  08001230  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001230  08001230  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001230  08001230  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001230  08001230  00011230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001234  08001234  00011234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000064  0800129c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  0800129c  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c82  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000044d  00000000  00000000  00020d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b8  00000000  00000000  00021160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000170  00000000  00000000  00021318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002e47  00000000  00000000  00021488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001abd  00000000  00000000  000242cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000976a  00000000  00000000  00025d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002f4f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c00  00000000  00000000  0002f548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001164 	.word	0x08001164

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	08001164 	.word	0x08001164

08000204 <task1_handler>:
} TCB_T;

 TCB_T user_tasks[MAX_TASKS];

void task1_handler (void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is task==>> 1\n");
 8000208:	4801      	ldr	r0, [pc, #4]	; (8000210 <task1_handler+0xc>)
 800020a:	f000 fb21 	bl	8000850 <puts>
 800020e:	e7fb      	b.n	8000208 <task1_handler+0x4>
 8000210:	0800117c 	.word	0x0800117c

08000214 <task2_handler>:
	}
}

void task2_handler (void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is task==>> 2\n");
 8000218:	4801      	ldr	r0, [pc, #4]	; (8000220 <task2_handler+0xc>)
 800021a:	f000 fb19 	bl	8000850 <puts>
 800021e:	e7fb      	b.n	8000218 <task2_handler+0x4>
 8000220:	08001190 	.word	0x08001190

08000224 <task3_handler>:
	}
}

void task3_handler (void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is task==>> 3\n");
 8000228:	4801      	ldr	r0, [pc, #4]	; (8000230 <task3_handler+0xc>)
 800022a:	f000 fb11 	bl	8000850 <puts>
 800022e:	e7fb      	b.n	8000228 <task3_handler+0x4>
 8000230:	080011a4 	.word	0x080011a4

08000234 <task4_handler>:
	}
}

void task4_handler (void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is task==>> 4\n");
 8000238:	4801      	ldr	r0, [pc, #4]	; (8000240 <task4_handler+0xc>)
 800023a:	f000 fb09 	bl	8000850 <puts>
 800023e:	e7fb      	b.n	8000238 <task4_handler+0x4>
 8000240:	080011b8 	.word	0x080011b8

08000244 <enable_processor_faults>:
	}
}


void enable_processor_faults(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
	SCB_SHCSR |= (USGFAULTENA | BUSFAULTENA | MEMFAULTENA);
 8000248:	4b04      	ldr	r3, [pc, #16]	; (800025c <enable_processor_faults+0x18>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a03      	ldr	r2, [pc, #12]	; (800025c <enable_processor_faults+0x18>)
 800024e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000252:	6013      	str	r3, [r2, #0]

}
 8000254:	bf00      	nop
 8000256:	46bd      	mov	sp, r7
 8000258:	bc80      	pop	{r7}
 800025a:	4770      	bx	lr
 800025c:	e000ed24 	.word	0xe000ed24

08000260 <get_psp_value>:



uint32_t get_psp_value(void) //helper function
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
	return user_tasks[current_task].psp_value;
 8000264:	4b04      	ldr	r3, [pc, #16]	; (8000278 <get_psp_value+0x18>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	4a04      	ldr	r2, [pc, #16]	; (800027c <get_psp_value+0x1c>)
 800026a:	011b      	lsls	r3, r3, #4
 800026c:	4413      	add	r3, r2
 800026e:	681b      	ldr	r3, [r3, #0]
}
 8000270:	4618      	mov	r0, r3
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr
 8000278:	20000080 	.word	0x20000080
 800027c:	20000084 	.word	0x20000084

08000280 <switch_sp_to_psp>:

__attribute__((naked)) void switch_sp_to_psp(void){

	/*Preserve main return address*/
	__asm volatile ("PUSH {LR}");
 8000280:	b500      	push	{lr}

	//1. Initialize PSP with TASK1_START
	__asm volatile ("BL get_psp_value"); 	/*current task address will be stored in R0 (AAPCS)*/
 8000282:	f7ff ffed 	bl	8000260 <get_psp_value>
	__asm volatile ("MSR PSP,R0");			/*PSP has the current task value*/
 8000286:	f380 8809 	msr	PSP, r0

	/*LR has the main return address again*/
	__asm volatile ("POP {LR}");
 800028a:	f85d eb04 	ldr.w	lr, [sp], #4

	//2. Change SP to PSP in CONTROL register
	__asm volatile ("MOV R0,#0x02");
 800028e:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");		/*SPEL is 1 to switch SP to PSP*/
 8000292:	f380 8814 	msr	CONTROL, r0

	/*Return to main*/
	__asm volatile ("BX LR");
 8000296:	4770      	bx	lr

}
 8000298:	bf00      	nop

0800029a <init_schedular_stack>:

__attribute__((naked)) void init_schedular_stack(uint32_t sched_TopOfStack)
{
 800029a:	4603      	mov	r3, r0
	__asm volatile ("MSR MSP,%0" : :"r"(sched_TopOfStack): );
 800029c:	f383 8808 	msr	MSP, r3
	__asm volatile ("BX LR"); //return to main
 80002a0:	4770      	bx	lr
}
 80002a2:	bf00      	nop

080002a4 <init_systick_timer>:


void init_systick_timer(uint32_t tick_hz)

{
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	uint32_t count_value = (SYSTEM_CLK / tick_hz) - 1U;
 80002ac:	4a0f      	ldr	r2, [pc, #60]	; (80002ec <init_systick_timer+0x48>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002b4:	3b01      	subs	r3, #1
 80002b6:	60fb      	str	r3, [r7, #12]
	SYST_RVR &= ~(0x00FFFFFFU);
 80002b8:	4b0d      	ldr	r3, [pc, #52]	; (80002f0 <init_systick_timer+0x4c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a0c      	ldr	r2, [pc, #48]	; (80002f0 <init_systick_timer+0x4c>)
 80002be:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80002c2:	6013      	str	r3, [r2, #0]

	//reload value
	SYST_RVR = count_value ;
 80002c4:	4a0a      	ldr	r2, [pc, #40]	; (80002f0 <init_systick_timer+0x4c>)
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	6013      	str	r3, [r2, #0]


	//do some settings
	SYST_CSR |= (1U << 1 | 1U << 2); // Enables SysTick exception request & Indicates the clock source
 80002ca:	4b0a      	ldr	r3, [pc, #40]	; (80002f4 <init_systick_timer+0x50>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a09      	ldr	r2, [pc, #36]	; (80002f4 <init_systick_timer+0x50>)
 80002d0:	f043 0306 	orr.w	r3, r3, #6
 80002d4:	6013      	str	r3, [r2, #0]

	//enable
	SYST_CSR |= 1U ;
 80002d6:	4b07      	ldr	r3, [pc, #28]	; (80002f4 <init_systick_timer+0x50>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a06      	ldr	r2, [pc, #24]	; (80002f4 <init_systick_timer+0x50>)
 80002dc:	f043 0301 	orr.w	r3, r3, #1
 80002e0:	6013      	str	r3, [r2, #0]
}
 80002e2:	bf00      	nop
 80002e4:	3714      	adds	r7, #20
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	00f42400 	.word	0x00f42400
 80002f0:	e000e014 	.word	0xe000e014
 80002f4:	e000e010 	.word	0xe000e010

080002f8 <init_tasks_stack>:

void init_tasks_stack(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0

	user_tasks[0].current_state = TASK_RUNNING_STATE;
 80002fe:	4b54      	ldr	r3, [pc, #336]	; (8000450 <init_tasks_stack+0x158>)
 8000300:	2200      	movs	r2, #0
 8000302:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_RUNNING_STATE;
 8000304:	4b52      	ldr	r3, [pc, #328]	; (8000450 <init_tasks_stack+0x158>)
 8000306:	2200      	movs	r2, #0
 8000308:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_RUNNING_STATE;
 800030a:	4b51      	ldr	r3, [pc, #324]	; (8000450 <init_tasks_stack+0x158>)
 800030c:	2200      	movs	r2, #0
 800030e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_RUNNING_STATE;
 8000312:	4b4f      	ldr	r3, [pc, #316]	; (8000450 <init_tasks_stack+0x158>)
 8000314:	2200      	movs	r2, #0
 8000316:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	user_tasks[0].psp_value = T1_STACK_START;
 800031a:	4b4d      	ldr	r3, [pc, #308]	; (8000450 <init_tasks_stack+0x158>)
 800031c:	4a4d      	ldr	r2, [pc, #308]	; (8000454 <init_tasks_stack+0x15c>)
 800031e:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T2_STACK_START;
 8000320:	4b4b      	ldr	r3, [pc, #300]	; (8000450 <init_tasks_stack+0x158>)
 8000322:	4a4d      	ldr	r2, [pc, #308]	; (8000458 <init_tasks_stack+0x160>)
 8000324:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T3_STACK_START;
 8000326:	4b4a      	ldr	r3, [pc, #296]	; (8000450 <init_tasks_stack+0x158>)
 8000328:	4a4c      	ldr	r2, [pc, #304]	; (800045c <init_tasks_stack+0x164>)
 800032a:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T4_STACK_START;
 800032c:	4b48      	ldr	r3, [pc, #288]	; (8000450 <init_tasks_stack+0x158>)
 800032e:	4a4c      	ldr	r2, [pc, #304]	; (8000460 <init_tasks_stack+0x168>)
 8000330:	631a      	str	r2, [r3, #48]	; 0x30

	user_tasks[0].task_handler = task1_handler;
 8000332:	4b47      	ldr	r3, [pc, #284]	; (8000450 <init_tasks_stack+0x158>)
 8000334:	4a4b      	ldr	r2, [pc, #300]	; (8000464 <init_tasks_stack+0x16c>)
 8000336:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task2_handler;
 8000338:	4b45      	ldr	r3, [pc, #276]	; (8000450 <init_tasks_stack+0x158>)
 800033a:	4a4b      	ldr	r2, [pc, #300]	; (8000468 <init_tasks_stack+0x170>)
 800033c:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task3_handler;
 800033e:	4b44      	ldr	r3, [pc, #272]	; (8000450 <init_tasks_stack+0x158>)
 8000340:	4a4a      	ldr	r2, [pc, #296]	; (800046c <init_tasks_stack+0x174>)
 8000342:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task4_handler;
 8000344:	4b42      	ldr	r3, [pc, #264]	; (8000450 <init_tasks_stack+0x158>)
 8000346:	4a4a      	ldr	r2, [pc, #296]	; (8000470 <init_tasks_stack+0x178>)
 8000348:	63da      	str	r2, [r3, #60]	; 0x3c


	uint32_t *pPSP;
	for(uint32_t i = 0 ; i < MAX_TASKS; i++)
 800034a:	2300      	movs	r3, #0
 800034c:	607b      	str	r3, [r7, #4]
 800034e:	e075      	b.n	800043c <init_tasks_stack+0x144>
	{
		pPSP = (uint32_t *) user_tasks[i].psp_value;
 8000350:	4a3f      	ldr	r2, [pc, #252]	; (8000450 <init_tasks_stack+0x158>)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	011b      	lsls	r3, r3, #4
 8000356:	4413      	add	r3, r2
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	603b      	str	r3, [r7, #0]

		/*FULL DESCENDING STACK : decrease the pointer first then store the value*/

		*(--pPSP) = DUMMY_XPSR; 		//0x0100 0000 (THUMB state bit is set)
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	3b04      	subs	r3, #4
 8000360:	603b      	str	r3, [r7, #0]
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000368:	601a      	str	r2, [r3, #0]
		*(--pPSP) = (uint32_t) user_tasks[i].task_handler;	//Address of the function
 800036a:	4a39      	ldr	r2, [pc, #228]	; (8000450 <init_tasks_stack+0x158>)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	011b      	lsls	r3, r3, #4
 8000370:	4413      	add	r3, r2
 8000372:	330c      	adds	r3, #12
 8000374:	681a      	ldr	r2, [r3, #0]
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	3b04      	subs	r3, #4
 800037a:	603b      	str	r3, [r7, #0]
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	601a      	str	r2, [r3, #0]
		*(--pPSP) = 0xFFFFFFFD;			//EXC_RETURN VALUE (THREAD mode and PSP is used after return)
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	3b04      	subs	r3, #4
 8000384:	603b      	str	r3, [r7, #0]
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	f06f 0202 	mvn.w	r2, #2
 800038c:	601a      	str	r2, [r3, #0]
		*(--pPSP) =	0; 					//R12
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	3b04      	subs	r3, #4
 8000392:	603b      	str	r3, [r7, #0]
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
		*(--pPSP) =	0; 					//R3
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	3b04      	subs	r3, #4
 800039e:	603b      	str	r3, [r7, #0]
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
		*(--pPSP) =	0; 					//R2
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	3b04      	subs	r3, #4
 80003aa:	603b      	str	r3, [r7, #0]
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
		*(--pPSP) =	0; 					//R1
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	3b04      	subs	r3, #4
 80003b6:	603b      	str	r3, [r7, #0]
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
		*(--pPSP) =	0; 					//R0
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	3b04      	subs	r3, #4
 80003c2:	603b      	str	r3, [r7, #0]
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
/********************************************************************************************************/
		*(--pPSP) =	0; 					//R11
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	3b04      	subs	r3, #4
 80003ce:	603b      	str	r3, [r7, #0]
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
		*(--pPSP) =	0; 					//R10
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	3b04      	subs	r3, #4
 80003da:	603b      	str	r3, [r7, #0]
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
		*(--pPSP) =	0; 					//R9
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	3b04      	subs	r3, #4
 80003e6:	603b      	str	r3, [r7, #0]
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
		*(--pPSP) =	0; 					//R8
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	3b04      	subs	r3, #4
 80003f2:	603b      	str	r3, [r7, #0]
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
		*(--pPSP) =	0; 					//R7
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	3b04      	subs	r3, #4
 80003fe:	603b      	str	r3, [r7, #0]
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
		*(--pPSP) =	0; 					//R6
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	3b04      	subs	r3, #4
 800040a:	603b      	str	r3, [r7, #0]
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
		*(--pPSP) =	0; 					//R5
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	3b04      	subs	r3, #4
 8000416:	603b      	str	r3, [r7, #0]
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
		*(--pPSP) =	0; 					//R4
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	3b04      	subs	r3, #4
 8000422:	603b      	str	r3, [r7, #0]
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
/********************************************************************************************************/
		user_tasks[i].psp_value = (uint32_t) pPSP;  //Preserve the PSP final value
 800042a:	683a      	ldr	r2, [r7, #0]
 800042c:	4908      	ldr	r1, [pc, #32]	; (8000450 <init_tasks_stack+0x158>)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	011b      	lsls	r3, r3, #4
 8000432:	440b      	add	r3, r1
 8000434:	601a      	str	r2, [r3, #0]
	for(uint32_t i = 0 ; i < MAX_TASKS; i++)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	3301      	adds	r3, #1
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	2b03      	cmp	r3, #3
 8000440:	d986      	bls.n	8000350 <init_tasks_stack+0x58>
	}
}
 8000442:	bf00      	nop
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	bc80      	pop	{r7}
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	20000084 	.word	0x20000084
 8000454:	20020000 	.word	0x20020000
 8000458:	2001fc00 	.word	0x2001fc00
 800045c:	2001f800 	.word	0x2001f800
 8000460:	2001f400 	.word	0x2001f400
 8000464:	08000205 	.word	0x08000205
 8000468:	08000215 	.word	0x08000215
 800046c:	08000225 	.word	0x08000225
 8000470:	08000235 	.word	0x08000235

08000474 <save_psp_value>:


void save_psp_value (uint32_t current_psp_value)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 800047c:	4b05      	ldr	r3, [pc, #20]	; (8000494 <save_psp_value+0x20>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	4a05      	ldr	r2, [pc, #20]	; (8000498 <save_psp_value+0x24>)
 8000482:	011b      	lsls	r3, r3, #4
 8000484:	4413      	add	r3, r2
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	601a      	str	r2, [r3, #0]
}
 800048a:	bf00      	nop
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr
 8000494:	20000080 	.word	0x20000080
 8000498:	20000084 	.word	0x20000084

0800049c <update_next_task>:

void update_next_task(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
	++current_task;
 80004a0:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <update_next_task+0x28>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	3301      	adds	r3, #1
 80004a6:	b2da      	uxtb	r2, r3
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <update_next_task+0x28>)
 80004aa:	701a      	strb	r2, [r3, #0]
	current_task = current_task % MAX_TASKS;
 80004ac:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <update_next_task+0x28>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	f003 0303 	and.w	r3, r3, #3
 80004b4:	b2da      	uxtb	r2, r3
 80004b6:	4b03      	ldr	r3, [pc, #12]	; (80004c4 <update_next_task+0x28>)
 80004b8:	701a      	strb	r2, [r3, #0]
}
 80004ba:	bf00      	nop
 80004bc:	46bd      	mov	sp, r7
 80004be:	bc80      	pop	{r7}
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	20000080 	.word	0x20000080

080004c8 <SysTick_Handler>:
{

	/*save the context of the current task*/

	//1. get the PSP of the current running thread
	__asm volatile("MRS R0,PSP");
 80004c8:	f3ef 8009 	mrs	r0, PSP
	//2. store the content from R4 to R11 on the current task private stack memory
	__asm volatile ("STMDB R0!,{R4-R11}");
 80004cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	/*****SAVE LR BEFOR USING BL********/
	__asm volatile("PUSH {LR}");
 80004d0:	b500      	push	{lr}

	//3. update the stack pointer to the current value
	__asm volatile("BL save_psp_value");
 80004d2:	f7ff ffcf 	bl	8000474 <save_psp_value>

	/*retrieve the context of the next task task*/

	//1. decide the next task to run
	__asm volatile("BL update_next_task");
 80004d6:	f7ff ffe1 	bl	800049c <update_next_task>
	//2. get its past PSP value
	__asm volatile ("BL get_psp_value");
 80004da:	f7ff fec1 	bl	8000260 <get_psp_value>
	//3. using its PSP retrieve from R4 to R11 from its private stack
	__asm volatile ("LDMIA R0!,{R4-R11}");
 80004de:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//4. update PSP then exit (exit will retrieve the rest of the stack frame)
	__asm volatile ("MSR PSP,R0");
 80004e2:	f380 8809 	msr	PSP, r0

	/*****RETRIEVE LR AFTER USING BL AND RETURN MANUALLY (because it is a naked function)********/
	__asm volatile ("POP {LR}");
 80004e6:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile ("BX LR");
 80004ea:	4770      	bx	lr
}
 80004ec:	bf00      	nop

080004ee <HardFault_Handler>:

/*Fault Handlers*/
void HardFault_Handler(void) {
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0
	while(1);
 80004f2:	e7fe      	b.n	80004f2 <HardFault_Handler+0x4>

080004f4 <MemManage_Handler>:
}

void MemManage_Handler(void) {
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
	while(1);
 80004f8:	e7fe      	b.n	80004f8 <MemManage_Handler+0x4>

080004fa <BusFault_Handler>:
}

void BusFault_Handler(void) {
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0
	while(1);
 80004fe:	e7fe      	b.n	80004fe <BusFault_Handler+0x4>

08000500 <UsageFault_Handler>:
}
void UsageFault_Handler(void){
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
	while(1);
 8000504:	e7fe      	b.n	8000504 <UsageFault_Handler+0x4>
	...

08000508 <main>:
#include <stdint.h>
#include <stdio.h>
#include "header.h"

int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	enable_processor_faults();
 800050c:	f7ff fe9a 	bl	8000244 <enable_processor_faults>

	init_schedular_stack(SCHED_STACK_START); 		//MSP for this stack
 8000510:	4806      	ldr	r0, [pc, #24]	; (800052c <main+0x24>)
 8000512:	f7ff fec2 	bl	800029a <init_schedular_stack>

	init_tasks_stack(); 							//dummy stack frames
 8000516:	f7ff feef 	bl	80002f8 <init_tasks_stack>

	init_systick_timer(TICK_HZ); 					//generate SysTick interrupt every 1ms
 800051a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800051e:	f7ff fec1 	bl	80002a4 <init_systick_timer>

	switch_sp_to_psp();								//tasks must use PSP (until this code, MSP was used)
 8000522:	f7ff fead 	bl	8000280 <switch_sp_to_psp>

	task1_handler();
 8000526:	f7ff fe6d 	bl	8000204 <task1_handler>

	for(;;);
 800052a:	e7fe      	b.n	800052a <main+0x22>
 800052c:	2001f000 	.word	0x2001f000

08000530 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <ITM_SendChar+0x44>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a0d      	ldr	r2, [pc, #52]	; (8000574 <ITM_SendChar+0x44>)
 8000540:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000544:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <ITM_SendChar+0x48>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a0b      	ldr	r2, [pc, #44]	; (8000578 <ITM_SendChar+0x48>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000552:	bf00      	nop
 8000554:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	2b00      	cmp	r3, #0
 8000560:	d0f8      	beq.n	8000554 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000562:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	6013      	str	r3, [r2, #0]
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	e000edfc 	.word	0xe000edfc
 8000578:	e0000e00 	.word	0xe0000e00

0800057c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
 800058c:	e00a      	b.n	80005a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800058e:	f3af 8000 	nop.w
 8000592:	4601      	mov	r1, r0
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	1c5a      	adds	r2, r3, #1
 8000598:	60ba      	str	r2, [r7, #8]
 800059a:	b2ca      	uxtb	r2, r1
 800059c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	3301      	adds	r3, #1
 80005a2:	617b      	str	r3, [r7, #20]
 80005a4:	697a      	ldr	r2, [r7, #20]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	dbf0      	blt.n	800058e <_read+0x12>
	}

return len;
 80005ac:	687b      	ldr	r3, [r7, #4]
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3718      	adds	r7, #24
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b086      	sub	sp, #24
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	60f8      	str	r0, [r7, #12]
 80005be:	60b9      	str	r1, [r7, #8]
 80005c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
 80005c6:	e009      	b.n	80005dc <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	1c5a      	adds	r2, r3, #1
 80005cc:	60ba      	str	r2, [r7, #8]
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff ffad 	bl	8000530 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	3301      	adds	r3, #1
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	697a      	ldr	r2, [r7, #20]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	dbf1      	blt.n	80005c8 <_write+0x12>
	}
	return len;
 80005e4:	687b      	ldr	r3, [r7, #4]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3718      	adds	r7, #24
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <_close>:

int _close(int file)
{
 80005ee:	b480      	push	{r7}
 80005f0:	b083      	sub	sp, #12
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
	return -1;
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr

08000604 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000614:	605a      	str	r2, [r3, #4]
	return 0;
 8000616:	2300      	movs	r3, #0
}
 8000618:	4618      	mov	r0, r3
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr

08000622 <_isatty>:

int _isatty(int file)
{
 8000622:	b480      	push	{r7}
 8000624:	b083      	sub	sp, #12
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
	return 1;
 800062a:	2301      	movs	r3, #1
}
 800062c:	4618      	mov	r0, r3
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr

08000636 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000636:	b480      	push	{r7}
 8000638:	b085      	sub	sp, #20
 800063a:	af00      	add	r7, sp, #0
 800063c:	60f8      	str	r0, [r7, #12]
 800063e:	60b9      	str	r1, [r7, #8]
 8000640:	607a      	str	r2, [r7, #4]
	return 0;
 8000642:	2300      	movs	r3, #0
}
 8000644:	4618      	mov	r0, r3
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
	...

08000650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000658:	4a14      	ldr	r2, [pc, #80]	; (80006ac <_sbrk+0x5c>)
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <_sbrk+0x60>)
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000664:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <_sbrk+0x64>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d102      	bne.n	8000672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <_sbrk+0x64>)
 800066e:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <_sbrk+0x68>)
 8000670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <_sbrk+0x64>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4413      	add	r3, r2
 800067a:	693a      	ldr	r2, [r7, #16]
 800067c:	429a      	cmp	r2, r3
 800067e:	d207      	bcs.n	8000690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000680:	f000 f846 	bl	8000710 <__errno>
 8000684:	4603      	mov	r3, r0
 8000686:	220c      	movs	r2, #12
 8000688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	e009      	b.n	80006a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <_sbrk+0x64>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000696:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <_sbrk+0x64>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	4a05      	ldr	r2, [pc, #20]	; (80006b4 <_sbrk+0x64>)
 80006a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006a2:	68fb      	ldr	r3, [r7, #12]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3718      	adds	r7, #24
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20020000 	.word	0x20020000
 80006b0:	00000400 	.word	0x00000400
 80006b4:	200000c4 	.word	0x200000c4
 80006b8:	200000d8 	.word	0x200000d8

080006bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006bc:	480d      	ldr	r0, [pc, #52]	; (80006f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c4:	480c      	ldr	r0, [pc, #48]	; (80006f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006c6:	490d      	ldr	r1, [pc, #52]	; (80006fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80006c8:	4a0d      	ldr	r2, [pc, #52]	; (8000700 <LoopForever+0xe>)
  movs r3, #0
 80006ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006cc:	e002      	b.n	80006d4 <LoopCopyDataInit>

080006ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006d2:	3304      	adds	r3, #4

080006d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d8:	d3f9      	bcc.n	80006ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006da:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006dc:	4c0a      	ldr	r4, [pc, #40]	; (8000708 <LoopForever+0x16>)
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e0:	e001      	b.n	80006e6 <LoopFillZerobss>

080006e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e4:	3204      	adds	r2, #4

080006e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e8:	d3fb      	bcc.n	80006e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ea:	f000 f817 	bl	800071c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ee:	f7ff ff0b 	bl	8000508 <main>

080006f2 <LoopForever>:

LoopForever:
    b LoopForever
 80006f2:	e7fe      	b.n	80006f2 <LoopForever>
  ldr   r0, =_estack
 80006f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006fc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000700:	08001238 	.word	0x08001238
  ldr r2, =_sbss
 8000704:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000708:	200000d8 	.word	0x200000d8

0800070c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800070c:	e7fe      	b.n	800070c <ADC_IRQHandler>
	...

08000710 <__errno>:
 8000710:	4b01      	ldr	r3, [pc, #4]	; (8000718 <__errno+0x8>)
 8000712:	6818      	ldr	r0, [r3, #0]
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	20000000 	.word	0x20000000

0800071c <__libc_init_array>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	4d0d      	ldr	r5, [pc, #52]	; (8000754 <__libc_init_array+0x38>)
 8000720:	4c0d      	ldr	r4, [pc, #52]	; (8000758 <__libc_init_array+0x3c>)
 8000722:	1b64      	subs	r4, r4, r5
 8000724:	10a4      	asrs	r4, r4, #2
 8000726:	2600      	movs	r6, #0
 8000728:	42a6      	cmp	r6, r4
 800072a:	d109      	bne.n	8000740 <__libc_init_array+0x24>
 800072c:	4d0b      	ldr	r5, [pc, #44]	; (800075c <__libc_init_array+0x40>)
 800072e:	4c0c      	ldr	r4, [pc, #48]	; (8000760 <__libc_init_array+0x44>)
 8000730:	f000 fd18 	bl	8001164 <_init>
 8000734:	1b64      	subs	r4, r4, r5
 8000736:	10a4      	asrs	r4, r4, #2
 8000738:	2600      	movs	r6, #0
 800073a:	42a6      	cmp	r6, r4
 800073c:	d105      	bne.n	800074a <__libc_init_array+0x2e>
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f855 3b04 	ldr.w	r3, [r5], #4
 8000744:	4798      	blx	r3
 8000746:	3601      	adds	r6, #1
 8000748:	e7ee      	b.n	8000728 <__libc_init_array+0xc>
 800074a:	f855 3b04 	ldr.w	r3, [r5], #4
 800074e:	4798      	blx	r3
 8000750:	3601      	adds	r6, #1
 8000752:	e7f2      	b.n	800073a <__libc_init_array+0x1e>
 8000754:	08001230 	.word	0x08001230
 8000758:	08001230 	.word	0x08001230
 800075c:	08001230 	.word	0x08001230
 8000760:	08001234 	.word	0x08001234

08000764 <memset>:
 8000764:	4402      	add	r2, r0
 8000766:	4603      	mov	r3, r0
 8000768:	4293      	cmp	r3, r2
 800076a:	d100      	bne.n	800076e <memset+0xa>
 800076c:	4770      	bx	lr
 800076e:	f803 1b01 	strb.w	r1, [r3], #1
 8000772:	e7f9      	b.n	8000768 <memset+0x4>

08000774 <_puts_r>:
 8000774:	b570      	push	{r4, r5, r6, lr}
 8000776:	460e      	mov	r6, r1
 8000778:	4605      	mov	r5, r0
 800077a:	b118      	cbz	r0, 8000784 <_puts_r+0x10>
 800077c:	6983      	ldr	r3, [r0, #24]
 800077e:	b90b      	cbnz	r3, 8000784 <_puts_r+0x10>
 8000780:	f000 fa44 	bl	8000c0c <__sinit>
 8000784:	69ab      	ldr	r3, [r5, #24]
 8000786:	68ac      	ldr	r4, [r5, #8]
 8000788:	b913      	cbnz	r3, 8000790 <_puts_r+0x1c>
 800078a:	4628      	mov	r0, r5
 800078c:	f000 fa3e 	bl	8000c0c <__sinit>
 8000790:	4b2c      	ldr	r3, [pc, #176]	; (8000844 <_puts_r+0xd0>)
 8000792:	429c      	cmp	r4, r3
 8000794:	d120      	bne.n	80007d8 <_puts_r+0x64>
 8000796:	686c      	ldr	r4, [r5, #4]
 8000798:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800079a:	07db      	lsls	r3, r3, #31
 800079c:	d405      	bmi.n	80007aa <_puts_r+0x36>
 800079e:	89a3      	ldrh	r3, [r4, #12]
 80007a0:	0598      	lsls	r0, r3, #22
 80007a2:	d402      	bmi.n	80007aa <_puts_r+0x36>
 80007a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007a6:	f000 facf 	bl	8000d48 <__retarget_lock_acquire_recursive>
 80007aa:	89a3      	ldrh	r3, [r4, #12]
 80007ac:	0719      	lsls	r1, r3, #28
 80007ae:	d51d      	bpl.n	80007ec <_puts_r+0x78>
 80007b0:	6923      	ldr	r3, [r4, #16]
 80007b2:	b1db      	cbz	r3, 80007ec <_puts_r+0x78>
 80007b4:	3e01      	subs	r6, #1
 80007b6:	68a3      	ldr	r3, [r4, #8]
 80007b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80007bc:	3b01      	subs	r3, #1
 80007be:	60a3      	str	r3, [r4, #8]
 80007c0:	bb39      	cbnz	r1, 8000812 <_puts_r+0x9e>
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	da38      	bge.n	8000838 <_puts_r+0xc4>
 80007c6:	4622      	mov	r2, r4
 80007c8:	210a      	movs	r1, #10
 80007ca:	4628      	mov	r0, r5
 80007cc:	f000 f848 	bl	8000860 <__swbuf_r>
 80007d0:	3001      	adds	r0, #1
 80007d2:	d011      	beq.n	80007f8 <_puts_r+0x84>
 80007d4:	250a      	movs	r5, #10
 80007d6:	e011      	b.n	80007fc <_puts_r+0x88>
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <_puts_r+0xd4>)
 80007da:	429c      	cmp	r4, r3
 80007dc:	d101      	bne.n	80007e2 <_puts_r+0x6e>
 80007de:	68ac      	ldr	r4, [r5, #8]
 80007e0:	e7da      	b.n	8000798 <_puts_r+0x24>
 80007e2:	4b1a      	ldr	r3, [pc, #104]	; (800084c <_puts_r+0xd8>)
 80007e4:	429c      	cmp	r4, r3
 80007e6:	bf08      	it	eq
 80007e8:	68ec      	ldreq	r4, [r5, #12]
 80007ea:	e7d5      	b.n	8000798 <_puts_r+0x24>
 80007ec:	4621      	mov	r1, r4
 80007ee:	4628      	mov	r0, r5
 80007f0:	f000 f888 	bl	8000904 <__swsetup_r>
 80007f4:	2800      	cmp	r0, #0
 80007f6:	d0dd      	beq.n	80007b4 <_puts_r+0x40>
 80007f8:	f04f 35ff 	mov.w	r5, #4294967295
 80007fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007fe:	07da      	lsls	r2, r3, #31
 8000800:	d405      	bmi.n	800080e <_puts_r+0x9a>
 8000802:	89a3      	ldrh	r3, [r4, #12]
 8000804:	059b      	lsls	r3, r3, #22
 8000806:	d402      	bmi.n	800080e <_puts_r+0x9a>
 8000808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800080a:	f000 fa9e 	bl	8000d4a <__retarget_lock_release_recursive>
 800080e:	4628      	mov	r0, r5
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	2b00      	cmp	r3, #0
 8000814:	da04      	bge.n	8000820 <_puts_r+0xac>
 8000816:	69a2      	ldr	r2, [r4, #24]
 8000818:	429a      	cmp	r2, r3
 800081a:	dc06      	bgt.n	800082a <_puts_r+0xb6>
 800081c:	290a      	cmp	r1, #10
 800081e:	d004      	beq.n	800082a <_puts_r+0xb6>
 8000820:	6823      	ldr	r3, [r4, #0]
 8000822:	1c5a      	adds	r2, r3, #1
 8000824:	6022      	str	r2, [r4, #0]
 8000826:	7019      	strb	r1, [r3, #0]
 8000828:	e7c5      	b.n	80007b6 <_puts_r+0x42>
 800082a:	4622      	mov	r2, r4
 800082c:	4628      	mov	r0, r5
 800082e:	f000 f817 	bl	8000860 <__swbuf_r>
 8000832:	3001      	adds	r0, #1
 8000834:	d1bf      	bne.n	80007b6 <_puts_r+0x42>
 8000836:	e7df      	b.n	80007f8 <_puts_r+0x84>
 8000838:	6823      	ldr	r3, [r4, #0]
 800083a:	250a      	movs	r5, #10
 800083c:	1c5a      	adds	r2, r3, #1
 800083e:	6022      	str	r2, [r4, #0]
 8000840:	701d      	strb	r5, [r3, #0]
 8000842:	e7db      	b.n	80007fc <_puts_r+0x88>
 8000844:	080011f0 	.word	0x080011f0
 8000848:	08001210 	.word	0x08001210
 800084c:	080011d0 	.word	0x080011d0

08000850 <puts>:
 8000850:	4b02      	ldr	r3, [pc, #8]	; (800085c <puts+0xc>)
 8000852:	4601      	mov	r1, r0
 8000854:	6818      	ldr	r0, [r3, #0]
 8000856:	f7ff bf8d 	b.w	8000774 <_puts_r>
 800085a:	bf00      	nop
 800085c:	20000000 	.word	0x20000000

08000860 <__swbuf_r>:
 8000860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000862:	460e      	mov	r6, r1
 8000864:	4614      	mov	r4, r2
 8000866:	4605      	mov	r5, r0
 8000868:	b118      	cbz	r0, 8000872 <__swbuf_r+0x12>
 800086a:	6983      	ldr	r3, [r0, #24]
 800086c:	b90b      	cbnz	r3, 8000872 <__swbuf_r+0x12>
 800086e:	f000 f9cd 	bl	8000c0c <__sinit>
 8000872:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <__swbuf_r+0x98>)
 8000874:	429c      	cmp	r4, r3
 8000876:	d12b      	bne.n	80008d0 <__swbuf_r+0x70>
 8000878:	686c      	ldr	r4, [r5, #4]
 800087a:	69a3      	ldr	r3, [r4, #24]
 800087c:	60a3      	str	r3, [r4, #8]
 800087e:	89a3      	ldrh	r3, [r4, #12]
 8000880:	071a      	lsls	r2, r3, #28
 8000882:	d52f      	bpl.n	80008e4 <__swbuf_r+0x84>
 8000884:	6923      	ldr	r3, [r4, #16]
 8000886:	b36b      	cbz	r3, 80008e4 <__swbuf_r+0x84>
 8000888:	6923      	ldr	r3, [r4, #16]
 800088a:	6820      	ldr	r0, [r4, #0]
 800088c:	1ac0      	subs	r0, r0, r3
 800088e:	6963      	ldr	r3, [r4, #20]
 8000890:	b2f6      	uxtb	r6, r6
 8000892:	4283      	cmp	r3, r0
 8000894:	4637      	mov	r7, r6
 8000896:	dc04      	bgt.n	80008a2 <__swbuf_r+0x42>
 8000898:	4621      	mov	r1, r4
 800089a:	4628      	mov	r0, r5
 800089c:	f000 f922 	bl	8000ae4 <_fflush_r>
 80008a0:	bb30      	cbnz	r0, 80008f0 <__swbuf_r+0x90>
 80008a2:	68a3      	ldr	r3, [r4, #8]
 80008a4:	3b01      	subs	r3, #1
 80008a6:	60a3      	str	r3, [r4, #8]
 80008a8:	6823      	ldr	r3, [r4, #0]
 80008aa:	1c5a      	adds	r2, r3, #1
 80008ac:	6022      	str	r2, [r4, #0]
 80008ae:	701e      	strb	r6, [r3, #0]
 80008b0:	6963      	ldr	r3, [r4, #20]
 80008b2:	3001      	adds	r0, #1
 80008b4:	4283      	cmp	r3, r0
 80008b6:	d004      	beq.n	80008c2 <__swbuf_r+0x62>
 80008b8:	89a3      	ldrh	r3, [r4, #12]
 80008ba:	07db      	lsls	r3, r3, #31
 80008bc:	d506      	bpl.n	80008cc <__swbuf_r+0x6c>
 80008be:	2e0a      	cmp	r6, #10
 80008c0:	d104      	bne.n	80008cc <__swbuf_r+0x6c>
 80008c2:	4621      	mov	r1, r4
 80008c4:	4628      	mov	r0, r5
 80008c6:	f000 f90d 	bl	8000ae4 <_fflush_r>
 80008ca:	b988      	cbnz	r0, 80008f0 <__swbuf_r+0x90>
 80008cc:	4638      	mov	r0, r7
 80008ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008d0:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <__swbuf_r+0x9c>)
 80008d2:	429c      	cmp	r4, r3
 80008d4:	d101      	bne.n	80008da <__swbuf_r+0x7a>
 80008d6:	68ac      	ldr	r4, [r5, #8]
 80008d8:	e7cf      	b.n	800087a <__swbuf_r+0x1a>
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <__swbuf_r+0xa0>)
 80008dc:	429c      	cmp	r4, r3
 80008de:	bf08      	it	eq
 80008e0:	68ec      	ldreq	r4, [r5, #12]
 80008e2:	e7ca      	b.n	800087a <__swbuf_r+0x1a>
 80008e4:	4621      	mov	r1, r4
 80008e6:	4628      	mov	r0, r5
 80008e8:	f000 f80c 	bl	8000904 <__swsetup_r>
 80008ec:	2800      	cmp	r0, #0
 80008ee:	d0cb      	beq.n	8000888 <__swbuf_r+0x28>
 80008f0:	f04f 37ff 	mov.w	r7, #4294967295
 80008f4:	e7ea      	b.n	80008cc <__swbuf_r+0x6c>
 80008f6:	bf00      	nop
 80008f8:	080011f0 	.word	0x080011f0
 80008fc:	08001210 	.word	0x08001210
 8000900:	080011d0 	.word	0x080011d0

08000904 <__swsetup_r>:
 8000904:	4b32      	ldr	r3, [pc, #200]	; (80009d0 <__swsetup_r+0xcc>)
 8000906:	b570      	push	{r4, r5, r6, lr}
 8000908:	681d      	ldr	r5, [r3, #0]
 800090a:	4606      	mov	r6, r0
 800090c:	460c      	mov	r4, r1
 800090e:	b125      	cbz	r5, 800091a <__swsetup_r+0x16>
 8000910:	69ab      	ldr	r3, [r5, #24]
 8000912:	b913      	cbnz	r3, 800091a <__swsetup_r+0x16>
 8000914:	4628      	mov	r0, r5
 8000916:	f000 f979 	bl	8000c0c <__sinit>
 800091a:	4b2e      	ldr	r3, [pc, #184]	; (80009d4 <__swsetup_r+0xd0>)
 800091c:	429c      	cmp	r4, r3
 800091e:	d10f      	bne.n	8000940 <__swsetup_r+0x3c>
 8000920:	686c      	ldr	r4, [r5, #4]
 8000922:	89a3      	ldrh	r3, [r4, #12]
 8000924:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000928:	0719      	lsls	r1, r3, #28
 800092a:	d42c      	bmi.n	8000986 <__swsetup_r+0x82>
 800092c:	06dd      	lsls	r5, r3, #27
 800092e:	d411      	bmi.n	8000954 <__swsetup_r+0x50>
 8000930:	2309      	movs	r3, #9
 8000932:	6033      	str	r3, [r6, #0]
 8000934:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000938:	81a3      	strh	r3, [r4, #12]
 800093a:	f04f 30ff 	mov.w	r0, #4294967295
 800093e:	e03e      	b.n	80009be <__swsetup_r+0xba>
 8000940:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <__swsetup_r+0xd4>)
 8000942:	429c      	cmp	r4, r3
 8000944:	d101      	bne.n	800094a <__swsetup_r+0x46>
 8000946:	68ac      	ldr	r4, [r5, #8]
 8000948:	e7eb      	b.n	8000922 <__swsetup_r+0x1e>
 800094a:	4b24      	ldr	r3, [pc, #144]	; (80009dc <__swsetup_r+0xd8>)
 800094c:	429c      	cmp	r4, r3
 800094e:	bf08      	it	eq
 8000950:	68ec      	ldreq	r4, [r5, #12]
 8000952:	e7e6      	b.n	8000922 <__swsetup_r+0x1e>
 8000954:	0758      	lsls	r0, r3, #29
 8000956:	d512      	bpl.n	800097e <__swsetup_r+0x7a>
 8000958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800095a:	b141      	cbz	r1, 800096e <__swsetup_r+0x6a>
 800095c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000960:	4299      	cmp	r1, r3
 8000962:	d002      	beq.n	800096a <__swsetup_r+0x66>
 8000964:	4630      	mov	r0, r6
 8000966:	f000 fa57 	bl	8000e18 <_free_r>
 800096a:	2300      	movs	r3, #0
 800096c:	6363      	str	r3, [r4, #52]	; 0x34
 800096e:	89a3      	ldrh	r3, [r4, #12]
 8000970:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000974:	81a3      	strh	r3, [r4, #12]
 8000976:	2300      	movs	r3, #0
 8000978:	6063      	str	r3, [r4, #4]
 800097a:	6923      	ldr	r3, [r4, #16]
 800097c:	6023      	str	r3, [r4, #0]
 800097e:	89a3      	ldrh	r3, [r4, #12]
 8000980:	f043 0308 	orr.w	r3, r3, #8
 8000984:	81a3      	strh	r3, [r4, #12]
 8000986:	6923      	ldr	r3, [r4, #16]
 8000988:	b94b      	cbnz	r3, 800099e <__swsetup_r+0x9a>
 800098a:	89a3      	ldrh	r3, [r4, #12]
 800098c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000994:	d003      	beq.n	800099e <__swsetup_r+0x9a>
 8000996:	4621      	mov	r1, r4
 8000998:	4630      	mov	r0, r6
 800099a:	f000 f9fd 	bl	8000d98 <__smakebuf_r>
 800099e:	89a0      	ldrh	r0, [r4, #12]
 80009a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80009a4:	f010 0301 	ands.w	r3, r0, #1
 80009a8:	d00a      	beq.n	80009c0 <__swsetup_r+0xbc>
 80009aa:	2300      	movs	r3, #0
 80009ac:	60a3      	str	r3, [r4, #8]
 80009ae:	6963      	ldr	r3, [r4, #20]
 80009b0:	425b      	negs	r3, r3
 80009b2:	61a3      	str	r3, [r4, #24]
 80009b4:	6923      	ldr	r3, [r4, #16]
 80009b6:	b943      	cbnz	r3, 80009ca <__swsetup_r+0xc6>
 80009b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80009bc:	d1ba      	bne.n	8000934 <__swsetup_r+0x30>
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	0781      	lsls	r1, r0, #30
 80009c2:	bf58      	it	pl
 80009c4:	6963      	ldrpl	r3, [r4, #20]
 80009c6:	60a3      	str	r3, [r4, #8]
 80009c8:	e7f4      	b.n	80009b4 <__swsetup_r+0xb0>
 80009ca:	2000      	movs	r0, #0
 80009cc:	e7f7      	b.n	80009be <__swsetup_r+0xba>
 80009ce:	bf00      	nop
 80009d0:	20000000 	.word	0x20000000
 80009d4:	080011f0 	.word	0x080011f0
 80009d8:	08001210 	.word	0x08001210
 80009dc:	080011d0 	.word	0x080011d0

080009e0 <__sflush_r>:
 80009e0:	898a      	ldrh	r2, [r1, #12]
 80009e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009e4:	4605      	mov	r5, r0
 80009e6:	0710      	lsls	r0, r2, #28
 80009e8:	460c      	mov	r4, r1
 80009ea:	d457      	bmi.n	8000a9c <__sflush_r+0xbc>
 80009ec:	684b      	ldr	r3, [r1, #4]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	dc04      	bgt.n	80009fc <__sflush_r+0x1c>
 80009f2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	dc01      	bgt.n	80009fc <__sflush_r+0x1c>
 80009f8:	2000      	movs	r0, #0
 80009fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80009fe:	2e00      	cmp	r6, #0
 8000a00:	d0fa      	beq.n	80009f8 <__sflush_r+0x18>
 8000a02:	2300      	movs	r3, #0
 8000a04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000a08:	682f      	ldr	r7, [r5, #0]
 8000a0a:	602b      	str	r3, [r5, #0]
 8000a0c:	d032      	beq.n	8000a74 <__sflush_r+0x94>
 8000a0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000a10:	89a3      	ldrh	r3, [r4, #12]
 8000a12:	075a      	lsls	r2, r3, #29
 8000a14:	d505      	bpl.n	8000a22 <__sflush_r+0x42>
 8000a16:	6863      	ldr	r3, [r4, #4]
 8000a18:	1ac0      	subs	r0, r0, r3
 8000a1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a1c:	b10b      	cbz	r3, 8000a22 <__sflush_r+0x42>
 8000a1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a20:	1ac0      	subs	r0, r0, r3
 8000a22:	2300      	movs	r3, #0
 8000a24:	4602      	mov	r2, r0
 8000a26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a28:	6a21      	ldr	r1, [r4, #32]
 8000a2a:	4628      	mov	r0, r5
 8000a2c:	47b0      	blx	r6
 8000a2e:	1c43      	adds	r3, r0, #1
 8000a30:	89a3      	ldrh	r3, [r4, #12]
 8000a32:	d106      	bne.n	8000a42 <__sflush_r+0x62>
 8000a34:	6829      	ldr	r1, [r5, #0]
 8000a36:	291d      	cmp	r1, #29
 8000a38:	d82c      	bhi.n	8000a94 <__sflush_r+0xb4>
 8000a3a:	4a29      	ldr	r2, [pc, #164]	; (8000ae0 <__sflush_r+0x100>)
 8000a3c:	40ca      	lsrs	r2, r1
 8000a3e:	07d6      	lsls	r6, r2, #31
 8000a40:	d528      	bpl.n	8000a94 <__sflush_r+0xb4>
 8000a42:	2200      	movs	r2, #0
 8000a44:	6062      	str	r2, [r4, #4]
 8000a46:	04d9      	lsls	r1, r3, #19
 8000a48:	6922      	ldr	r2, [r4, #16]
 8000a4a:	6022      	str	r2, [r4, #0]
 8000a4c:	d504      	bpl.n	8000a58 <__sflush_r+0x78>
 8000a4e:	1c42      	adds	r2, r0, #1
 8000a50:	d101      	bne.n	8000a56 <__sflush_r+0x76>
 8000a52:	682b      	ldr	r3, [r5, #0]
 8000a54:	b903      	cbnz	r3, 8000a58 <__sflush_r+0x78>
 8000a56:	6560      	str	r0, [r4, #84]	; 0x54
 8000a58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a5a:	602f      	str	r7, [r5, #0]
 8000a5c:	2900      	cmp	r1, #0
 8000a5e:	d0cb      	beq.n	80009f8 <__sflush_r+0x18>
 8000a60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a64:	4299      	cmp	r1, r3
 8000a66:	d002      	beq.n	8000a6e <__sflush_r+0x8e>
 8000a68:	4628      	mov	r0, r5
 8000a6a:	f000 f9d5 	bl	8000e18 <_free_r>
 8000a6e:	2000      	movs	r0, #0
 8000a70:	6360      	str	r0, [r4, #52]	; 0x34
 8000a72:	e7c2      	b.n	80009fa <__sflush_r+0x1a>
 8000a74:	6a21      	ldr	r1, [r4, #32]
 8000a76:	2301      	movs	r3, #1
 8000a78:	4628      	mov	r0, r5
 8000a7a:	47b0      	blx	r6
 8000a7c:	1c41      	adds	r1, r0, #1
 8000a7e:	d1c7      	bne.n	8000a10 <__sflush_r+0x30>
 8000a80:	682b      	ldr	r3, [r5, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d0c4      	beq.n	8000a10 <__sflush_r+0x30>
 8000a86:	2b1d      	cmp	r3, #29
 8000a88:	d001      	beq.n	8000a8e <__sflush_r+0xae>
 8000a8a:	2b16      	cmp	r3, #22
 8000a8c:	d101      	bne.n	8000a92 <__sflush_r+0xb2>
 8000a8e:	602f      	str	r7, [r5, #0]
 8000a90:	e7b2      	b.n	80009f8 <__sflush_r+0x18>
 8000a92:	89a3      	ldrh	r3, [r4, #12]
 8000a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a98:	81a3      	strh	r3, [r4, #12]
 8000a9a:	e7ae      	b.n	80009fa <__sflush_r+0x1a>
 8000a9c:	690f      	ldr	r7, [r1, #16]
 8000a9e:	2f00      	cmp	r7, #0
 8000aa0:	d0aa      	beq.n	80009f8 <__sflush_r+0x18>
 8000aa2:	0793      	lsls	r3, r2, #30
 8000aa4:	680e      	ldr	r6, [r1, #0]
 8000aa6:	bf08      	it	eq
 8000aa8:	694b      	ldreq	r3, [r1, #20]
 8000aaa:	600f      	str	r7, [r1, #0]
 8000aac:	bf18      	it	ne
 8000aae:	2300      	movne	r3, #0
 8000ab0:	1bf6      	subs	r6, r6, r7
 8000ab2:	608b      	str	r3, [r1, #8]
 8000ab4:	2e00      	cmp	r6, #0
 8000ab6:	dd9f      	ble.n	80009f8 <__sflush_r+0x18>
 8000ab8:	6a21      	ldr	r1, [r4, #32]
 8000aba:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000abe:	4633      	mov	r3, r6
 8000ac0:	463a      	mov	r2, r7
 8000ac2:	4628      	mov	r0, r5
 8000ac4:	47e0      	blx	ip
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	dc06      	bgt.n	8000ad8 <__sflush_r+0xf8>
 8000aca:	89a3      	ldrh	r3, [r4, #12]
 8000acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad0:	81a3      	strh	r3, [r4, #12]
 8000ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad6:	e790      	b.n	80009fa <__sflush_r+0x1a>
 8000ad8:	4407      	add	r7, r0
 8000ada:	1a36      	subs	r6, r6, r0
 8000adc:	e7ea      	b.n	8000ab4 <__sflush_r+0xd4>
 8000ade:	bf00      	nop
 8000ae0:	20400001 	.word	0x20400001

08000ae4 <_fflush_r>:
 8000ae4:	b538      	push	{r3, r4, r5, lr}
 8000ae6:	690b      	ldr	r3, [r1, #16]
 8000ae8:	4605      	mov	r5, r0
 8000aea:	460c      	mov	r4, r1
 8000aec:	b913      	cbnz	r3, 8000af4 <_fflush_r+0x10>
 8000aee:	2500      	movs	r5, #0
 8000af0:	4628      	mov	r0, r5
 8000af2:	bd38      	pop	{r3, r4, r5, pc}
 8000af4:	b118      	cbz	r0, 8000afe <_fflush_r+0x1a>
 8000af6:	6983      	ldr	r3, [r0, #24]
 8000af8:	b90b      	cbnz	r3, 8000afe <_fflush_r+0x1a>
 8000afa:	f000 f887 	bl	8000c0c <__sinit>
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <_fflush_r+0x6c>)
 8000b00:	429c      	cmp	r4, r3
 8000b02:	d11b      	bne.n	8000b3c <_fflush_r+0x58>
 8000b04:	686c      	ldr	r4, [r5, #4]
 8000b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d0ef      	beq.n	8000aee <_fflush_r+0xa>
 8000b0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000b10:	07d0      	lsls	r0, r2, #31
 8000b12:	d404      	bmi.n	8000b1e <_fflush_r+0x3a>
 8000b14:	0599      	lsls	r1, r3, #22
 8000b16:	d402      	bmi.n	8000b1e <_fflush_r+0x3a>
 8000b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b1a:	f000 f915 	bl	8000d48 <__retarget_lock_acquire_recursive>
 8000b1e:	4628      	mov	r0, r5
 8000b20:	4621      	mov	r1, r4
 8000b22:	f7ff ff5d 	bl	80009e0 <__sflush_r>
 8000b26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b28:	07da      	lsls	r2, r3, #31
 8000b2a:	4605      	mov	r5, r0
 8000b2c:	d4e0      	bmi.n	8000af0 <_fflush_r+0xc>
 8000b2e:	89a3      	ldrh	r3, [r4, #12]
 8000b30:	059b      	lsls	r3, r3, #22
 8000b32:	d4dd      	bmi.n	8000af0 <_fflush_r+0xc>
 8000b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b36:	f000 f908 	bl	8000d4a <__retarget_lock_release_recursive>
 8000b3a:	e7d9      	b.n	8000af0 <_fflush_r+0xc>
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <_fflush_r+0x70>)
 8000b3e:	429c      	cmp	r4, r3
 8000b40:	d101      	bne.n	8000b46 <_fflush_r+0x62>
 8000b42:	68ac      	ldr	r4, [r5, #8]
 8000b44:	e7df      	b.n	8000b06 <_fflush_r+0x22>
 8000b46:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <_fflush_r+0x74>)
 8000b48:	429c      	cmp	r4, r3
 8000b4a:	bf08      	it	eq
 8000b4c:	68ec      	ldreq	r4, [r5, #12]
 8000b4e:	e7da      	b.n	8000b06 <_fflush_r+0x22>
 8000b50:	080011f0 	.word	0x080011f0
 8000b54:	08001210 	.word	0x08001210
 8000b58:	080011d0 	.word	0x080011d0

08000b5c <std>:
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	b510      	push	{r4, lr}
 8000b60:	4604      	mov	r4, r0
 8000b62:	e9c0 3300 	strd	r3, r3, [r0]
 8000b66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b6a:	6083      	str	r3, [r0, #8]
 8000b6c:	8181      	strh	r1, [r0, #12]
 8000b6e:	6643      	str	r3, [r0, #100]	; 0x64
 8000b70:	81c2      	strh	r2, [r0, #14]
 8000b72:	6183      	str	r3, [r0, #24]
 8000b74:	4619      	mov	r1, r3
 8000b76:	2208      	movs	r2, #8
 8000b78:	305c      	adds	r0, #92	; 0x5c
 8000b7a:	f7ff fdf3 	bl	8000764 <memset>
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <std+0x38>)
 8000b80:	6263      	str	r3, [r4, #36]	; 0x24
 8000b82:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <std+0x3c>)
 8000b84:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b86:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <std+0x40>)
 8000b88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <std+0x44>)
 8000b8c:	6224      	str	r4, [r4, #32]
 8000b8e:	6323      	str	r3, [r4, #48]	; 0x30
 8000b90:	bd10      	pop	{r4, pc}
 8000b92:	bf00      	nop
 8000b94:	08000ff5 	.word	0x08000ff5
 8000b98:	08001017 	.word	0x08001017
 8000b9c:	0800104f 	.word	0x0800104f
 8000ba0:	08001073 	.word	0x08001073

08000ba4 <_cleanup_r>:
 8000ba4:	4901      	ldr	r1, [pc, #4]	; (8000bac <_cleanup_r+0x8>)
 8000ba6:	f000 b8af 	b.w	8000d08 <_fwalk_reent>
 8000baa:	bf00      	nop
 8000bac:	08000ae5 	.word	0x08000ae5

08000bb0 <__sfmoreglue>:
 8000bb0:	b570      	push	{r4, r5, r6, lr}
 8000bb2:	2268      	movs	r2, #104	; 0x68
 8000bb4:	1e4d      	subs	r5, r1, #1
 8000bb6:	4355      	muls	r5, r2
 8000bb8:	460e      	mov	r6, r1
 8000bba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000bbe:	f000 f995 	bl	8000eec <_malloc_r>
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	b140      	cbz	r0, 8000bd8 <__sfmoreglue+0x28>
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	e9c0 1600 	strd	r1, r6, [r0]
 8000bcc:	300c      	adds	r0, #12
 8000bce:	60a0      	str	r0, [r4, #8]
 8000bd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000bd4:	f7ff fdc6 	bl	8000764 <memset>
 8000bd8:	4620      	mov	r0, r4
 8000bda:	bd70      	pop	{r4, r5, r6, pc}

08000bdc <__sfp_lock_acquire>:
 8000bdc:	4801      	ldr	r0, [pc, #4]	; (8000be4 <__sfp_lock_acquire+0x8>)
 8000bde:	f000 b8b3 	b.w	8000d48 <__retarget_lock_acquire_recursive>
 8000be2:	bf00      	nop
 8000be4:	200000c9 	.word	0x200000c9

08000be8 <__sfp_lock_release>:
 8000be8:	4801      	ldr	r0, [pc, #4]	; (8000bf0 <__sfp_lock_release+0x8>)
 8000bea:	f000 b8ae 	b.w	8000d4a <__retarget_lock_release_recursive>
 8000bee:	bf00      	nop
 8000bf0:	200000c9 	.word	0x200000c9

08000bf4 <__sinit_lock_acquire>:
 8000bf4:	4801      	ldr	r0, [pc, #4]	; (8000bfc <__sinit_lock_acquire+0x8>)
 8000bf6:	f000 b8a7 	b.w	8000d48 <__retarget_lock_acquire_recursive>
 8000bfa:	bf00      	nop
 8000bfc:	200000ca 	.word	0x200000ca

08000c00 <__sinit_lock_release>:
 8000c00:	4801      	ldr	r0, [pc, #4]	; (8000c08 <__sinit_lock_release+0x8>)
 8000c02:	f000 b8a2 	b.w	8000d4a <__retarget_lock_release_recursive>
 8000c06:	bf00      	nop
 8000c08:	200000ca 	.word	0x200000ca

08000c0c <__sinit>:
 8000c0c:	b510      	push	{r4, lr}
 8000c0e:	4604      	mov	r4, r0
 8000c10:	f7ff fff0 	bl	8000bf4 <__sinit_lock_acquire>
 8000c14:	69a3      	ldr	r3, [r4, #24]
 8000c16:	b11b      	cbz	r3, 8000c20 <__sinit+0x14>
 8000c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c1c:	f7ff bff0 	b.w	8000c00 <__sinit_lock_release>
 8000c20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000c24:	6523      	str	r3, [r4, #80]	; 0x50
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <__sinit+0x68>)
 8000c28:	4a13      	ldr	r2, [pc, #76]	; (8000c78 <__sinit+0x6c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8000c2e:	42a3      	cmp	r3, r4
 8000c30:	bf04      	itt	eq
 8000c32:	2301      	moveq	r3, #1
 8000c34:	61a3      	streq	r3, [r4, #24]
 8000c36:	4620      	mov	r0, r4
 8000c38:	f000 f820 	bl	8000c7c <__sfp>
 8000c3c:	6060      	str	r0, [r4, #4]
 8000c3e:	4620      	mov	r0, r4
 8000c40:	f000 f81c 	bl	8000c7c <__sfp>
 8000c44:	60a0      	str	r0, [r4, #8]
 8000c46:	4620      	mov	r0, r4
 8000c48:	f000 f818 	bl	8000c7c <__sfp>
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	60e0      	str	r0, [r4, #12]
 8000c50:	2104      	movs	r1, #4
 8000c52:	6860      	ldr	r0, [r4, #4]
 8000c54:	f7ff ff82 	bl	8000b5c <std>
 8000c58:	68a0      	ldr	r0, [r4, #8]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	2109      	movs	r1, #9
 8000c5e:	f7ff ff7d 	bl	8000b5c <std>
 8000c62:	68e0      	ldr	r0, [r4, #12]
 8000c64:	2202      	movs	r2, #2
 8000c66:	2112      	movs	r1, #18
 8000c68:	f7ff ff78 	bl	8000b5c <std>
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	61a3      	str	r3, [r4, #24]
 8000c70:	e7d2      	b.n	8000c18 <__sinit+0xc>
 8000c72:	bf00      	nop
 8000c74:	080011cc 	.word	0x080011cc
 8000c78:	08000ba5 	.word	0x08000ba5

08000c7c <__sfp>:
 8000c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c7e:	4607      	mov	r7, r0
 8000c80:	f7ff ffac 	bl	8000bdc <__sfp_lock_acquire>
 8000c84:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <__sfp+0x84>)
 8000c86:	681e      	ldr	r6, [r3, #0]
 8000c88:	69b3      	ldr	r3, [r6, #24]
 8000c8a:	b913      	cbnz	r3, 8000c92 <__sfp+0x16>
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	f7ff ffbd 	bl	8000c0c <__sinit>
 8000c92:	3648      	adds	r6, #72	; 0x48
 8000c94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	d503      	bpl.n	8000ca4 <__sfp+0x28>
 8000c9c:	6833      	ldr	r3, [r6, #0]
 8000c9e:	b30b      	cbz	r3, 8000ce4 <__sfp+0x68>
 8000ca0:	6836      	ldr	r6, [r6, #0]
 8000ca2:	e7f7      	b.n	8000c94 <__sfp+0x18>
 8000ca4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000ca8:	b9d5      	cbnz	r5, 8000ce0 <__sfp+0x64>
 8000caa:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <__sfp+0x88>)
 8000cac:	60e3      	str	r3, [r4, #12]
 8000cae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000cb2:	6665      	str	r5, [r4, #100]	; 0x64
 8000cb4:	f000 f847 	bl	8000d46 <__retarget_lock_init_recursive>
 8000cb8:	f7ff ff96 	bl	8000be8 <__sfp_lock_release>
 8000cbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000cc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000cc4:	6025      	str	r5, [r4, #0]
 8000cc6:	61a5      	str	r5, [r4, #24]
 8000cc8:	2208      	movs	r2, #8
 8000cca:	4629      	mov	r1, r5
 8000ccc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000cd0:	f7ff fd48 	bl	8000764 <memset>
 8000cd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000cd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000cdc:	4620      	mov	r0, r4
 8000cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ce0:	3468      	adds	r4, #104	; 0x68
 8000ce2:	e7d9      	b.n	8000c98 <__sfp+0x1c>
 8000ce4:	2104      	movs	r1, #4
 8000ce6:	4638      	mov	r0, r7
 8000ce8:	f7ff ff62 	bl	8000bb0 <__sfmoreglue>
 8000cec:	4604      	mov	r4, r0
 8000cee:	6030      	str	r0, [r6, #0]
 8000cf0:	2800      	cmp	r0, #0
 8000cf2:	d1d5      	bne.n	8000ca0 <__sfp+0x24>
 8000cf4:	f7ff ff78 	bl	8000be8 <__sfp_lock_release>
 8000cf8:	230c      	movs	r3, #12
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	e7ee      	b.n	8000cdc <__sfp+0x60>
 8000cfe:	bf00      	nop
 8000d00:	080011cc 	.word	0x080011cc
 8000d04:	ffff0001 	.word	0xffff0001

08000d08 <_fwalk_reent>:
 8000d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d0c:	4606      	mov	r6, r0
 8000d0e:	4688      	mov	r8, r1
 8000d10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000d14:	2700      	movs	r7, #0
 8000d16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000d1a:	f1b9 0901 	subs.w	r9, r9, #1
 8000d1e:	d505      	bpl.n	8000d2c <_fwalk_reent+0x24>
 8000d20:	6824      	ldr	r4, [r4, #0]
 8000d22:	2c00      	cmp	r4, #0
 8000d24:	d1f7      	bne.n	8000d16 <_fwalk_reent+0xe>
 8000d26:	4638      	mov	r0, r7
 8000d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d2c:	89ab      	ldrh	r3, [r5, #12]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d907      	bls.n	8000d42 <_fwalk_reent+0x3a>
 8000d32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000d36:	3301      	adds	r3, #1
 8000d38:	d003      	beq.n	8000d42 <_fwalk_reent+0x3a>
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	47c0      	blx	r8
 8000d40:	4307      	orrs	r7, r0
 8000d42:	3568      	adds	r5, #104	; 0x68
 8000d44:	e7e9      	b.n	8000d1a <_fwalk_reent+0x12>

08000d46 <__retarget_lock_init_recursive>:
 8000d46:	4770      	bx	lr

08000d48 <__retarget_lock_acquire_recursive>:
 8000d48:	4770      	bx	lr

08000d4a <__retarget_lock_release_recursive>:
 8000d4a:	4770      	bx	lr

08000d4c <__swhatbuf_r>:
 8000d4c:	b570      	push	{r4, r5, r6, lr}
 8000d4e:	460e      	mov	r6, r1
 8000d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d54:	2900      	cmp	r1, #0
 8000d56:	b096      	sub	sp, #88	; 0x58
 8000d58:	4614      	mov	r4, r2
 8000d5a:	461d      	mov	r5, r3
 8000d5c:	da08      	bge.n	8000d70 <__swhatbuf_r+0x24>
 8000d5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000d62:	2200      	movs	r2, #0
 8000d64:	602a      	str	r2, [r5, #0]
 8000d66:	061a      	lsls	r2, r3, #24
 8000d68:	d410      	bmi.n	8000d8c <__swhatbuf_r+0x40>
 8000d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6e:	e00e      	b.n	8000d8e <__swhatbuf_r+0x42>
 8000d70:	466a      	mov	r2, sp
 8000d72:	f000 f9a5 	bl	80010c0 <_fstat_r>
 8000d76:	2800      	cmp	r0, #0
 8000d78:	dbf1      	blt.n	8000d5e <__swhatbuf_r+0x12>
 8000d7a:	9a01      	ldr	r2, [sp, #4]
 8000d7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000d80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000d84:	425a      	negs	r2, r3
 8000d86:	415a      	adcs	r2, r3
 8000d88:	602a      	str	r2, [r5, #0]
 8000d8a:	e7ee      	b.n	8000d6a <__swhatbuf_r+0x1e>
 8000d8c:	2340      	movs	r3, #64	; 0x40
 8000d8e:	2000      	movs	r0, #0
 8000d90:	6023      	str	r3, [r4, #0]
 8000d92:	b016      	add	sp, #88	; 0x58
 8000d94:	bd70      	pop	{r4, r5, r6, pc}
	...

08000d98 <__smakebuf_r>:
 8000d98:	898b      	ldrh	r3, [r1, #12]
 8000d9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d9c:	079d      	lsls	r5, r3, #30
 8000d9e:	4606      	mov	r6, r0
 8000da0:	460c      	mov	r4, r1
 8000da2:	d507      	bpl.n	8000db4 <__smakebuf_r+0x1c>
 8000da4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000da8:	6023      	str	r3, [r4, #0]
 8000daa:	6123      	str	r3, [r4, #16]
 8000dac:	2301      	movs	r3, #1
 8000dae:	6163      	str	r3, [r4, #20]
 8000db0:	b002      	add	sp, #8
 8000db2:	bd70      	pop	{r4, r5, r6, pc}
 8000db4:	ab01      	add	r3, sp, #4
 8000db6:	466a      	mov	r2, sp
 8000db8:	f7ff ffc8 	bl	8000d4c <__swhatbuf_r>
 8000dbc:	9900      	ldr	r1, [sp, #0]
 8000dbe:	4605      	mov	r5, r0
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	f000 f893 	bl	8000eec <_malloc_r>
 8000dc6:	b948      	cbnz	r0, 8000ddc <__smakebuf_r+0x44>
 8000dc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000dcc:	059a      	lsls	r2, r3, #22
 8000dce:	d4ef      	bmi.n	8000db0 <__smakebuf_r+0x18>
 8000dd0:	f023 0303 	bic.w	r3, r3, #3
 8000dd4:	f043 0302 	orr.w	r3, r3, #2
 8000dd8:	81a3      	strh	r3, [r4, #12]
 8000dda:	e7e3      	b.n	8000da4 <__smakebuf_r+0xc>
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <__smakebuf_r+0x7c>)
 8000dde:	62b3      	str	r3, [r6, #40]	; 0x28
 8000de0:	89a3      	ldrh	r3, [r4, #12]
 8000de2:	6020      	str	r0, [r4, #0]
 8000de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000de8:	81a3      	strh	r3, [r4, #12]
 8000dea:	9b00      	ldr	r3, [sp, #0]
 8000dec:	6163      	str	r3, [r4, #20]
 8000dee:	9b01      	ldr	r3, [sp, #4]
 8000df0:	6120      	str	r0, [r4, #16]
 8000df2:	b15b      	cbz	r3, 8000e0c <__smakebuf_r+0x74>
 8000df4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000df8:	4630      	mov	r0, r6
 8000dfa:	f000 f973 	bl	80010e4 <_isatty_r>
 8000dfe:	b128      	cbz	r0, 8000e0c <__smakebuf_r+0x74>
 8000e00:	89a3      	ldrh	r3, [r4, #12]
 8000e02:	f023 0303 	bic.w	r3, r3, #3
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	81a3      	strh	r3, [r4, #12]
 8000e0c:	89a0      	ldrh	r0, [r4, #12]
 8000e0e:	4305      	orrs	r5, r0
 8000e10:	81a5      	strh	r5, [r4, #12]
 8000e12:	e7cd      	b.n	8000db0 <__smakebuf_r+0x18>
 8000e14:	08000ba5 	.word	0x08000ba5

08000e18 <_free_r>:
 8000e18:	b538      	push	{r3, r4, r5, lr}
 8000e1a:	4605      	mov	r5, r0
 8000e1c:	2900      	cmp	r1, #0
 8000e1e:	d041      	beq.n	8000ea4 <_free_r+0x8c>
 8000e20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e24:	1f0c      	subs	r4, r1, #4
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	bfb8      	it	lt
 8000e2a:	18e4      	addlt	r4, r4, r3
 8000e2c:	f000 f97c 	bl	8001128 <__malloc_lock>
 8000e30:	4a1d      	ldr	r2, [pc, #116]	; (8000ea8 <_free_r+0x90>)
 8000e32:	6813      	ldr	r3, [r2, #0]
 8000e34:	b933      	cbnz	r3, 8000e44 <_free_r+0x2c>
 8000e36:	6063      	str	r3, [r4, #4]
 8000e38:	6014      	str	r4, [r2, #0]
 8000e3a:	4628      	mov	r0, r5
 8000e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e40:	f000 b978 	b.w	8001134 <__malloc_unlock>
 8000e44:	42a3      	cmp	r3, r4
 8000e46:	d908      	bls.n	8000e5a <_free_r+0x42>
 8000e48:	6820      	ldr	r0, [r4, #0]
 8000e4a:	1821      	adds	r1, r4, r0
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	bf01      	itttt	eq
 8000e50:	6819      	ldreq	r1, [r3, #0]
 8000e52:	685b      	ldreq	r3, [r3, #4]
 8000e54:	1809      	addeq	r1, r1, r0
 8000e56:	6021      	streq	r1, [r4, #0]
 8000e58:	e7ed      	b.n	8000e36 <_free_r+0x1e>
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	b10b      	cbz	r3, 8000e64 <_free_r+0x4c>
 8000e60:	42a3      	cmp	r3, r4
 8000e62:	d9fa      	bls.n	8000e5a <_free_r+0x42>
 8000e64:	6811      	ldr	r1, [r2, #0]
 8000e66:	1850      	adds	r0, r2, r1
 8000e68:	42a0      	cmp	r0, r4
 8000e6a:	d10b      	bne.n	8000e84 <_free_r+0x6c>
 8000e6c:	6820      	ldr	r0, [r4, #0]
 8000e6e:	4401      	add	r1, r0
 8000e70:	1850      	adds	r0, r2, r1
 8000e72:	4283      	cmp	r3, r0
 8000e74:	6011      	str	r1, [r2, #0]
 8000e76:	d1e0      	bne.n	8000e3a <_free_r+0x22>
 8000e78:	6818      	ldr	r0, [r3, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	6053      	str	r3, [r2, #4]
 8000e7e:	4401      	add	r1, r0
 8000e80:	6011      	str	r1, [r2, #0]
 8000e82:	e7da      	b.n	8000e3a <_free_r+0x22>
 8000e84:	d902      	bls.n	8000e8c <_free_r+0x74>
 8000e86:	230c      	movs	r3, #12
 8000e88:	602b      	str	r3, [r5, #0]
 8000e8a:	e7d6      	b.n	8000e3a <_free_r+0x22>
 8000e8c:	6820      	ldr	r0, [r4, #0]
 8000e8e:	1821      	adds	r1, r4, r0
 8000e90:	428b      	cmp	r3, r1
 8000e92:	bf04      	itt	eq
 8000e94:	6819      	ldreq	r1, [r3, #0]
 8000e96:	685b      	ldreq	r3, [r3, #4]
 8000e98:	6063      	str	r3, [r4, #4]
 8000e9a:	bf04      	itt	eq
 8000e9c:	1809      	addeq	r1, r1, r0
 8000e9e:	6021      	streq	r1, [r4, #0]
 8000ea0:	6054      	str	r4, [r2, #4]
 8000ea2:	e7ca      	b.n	8000e3a <_free_r+0x22>
 8000ea4:	bd38      	pop	{r3, r4, r5, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200000cc 	.word	0x200000cc

08000eac <sbrk_aligned>:
 8000eac:	b570      	push	{r4, r5, r6, lr}
 8000eae:	4e0e      	ldr	r6, [pc, #56]	; (8000ee8 <sbrk_aligned+0x3c>)
 8000eb0:	460c      	mov	r4, r1
 8000eb2:	6831      	ldr	r1, [r6, #0]
 8000eb4:	4605      	mov	r5, r0
 8000eb6:	b911      	cbnz	r1, 8000ebe <sbrk_aligned+0x12>
 8000eb8:	f000 f88c 	bl	8000fd4 <_sbrk_r>
 8000ebc:	6030      	str	r0, [r6, #0]
 8000ebe:	4621      	mov	r1, r4
 8000ec0:	4628      	mov	r0, r5
 8000ec2:	f000 f887 	bl	8000fd4 <_sbrk_r>
 8000ec6:	1c43      	adds	r3, r0, #1
 8000ec8:	d00a      	beq.n	8000ee0 <sbrk_aligned+0x34>
 8000eca:	1cc4      	adds	r4, r0, #3
 8000ecc:	f024 0403 	bic.w	r4, r4, #3
 8000ed0:	42a0      	cmp	r0, r4
 8000ed2:	d007      	beq.n	8000ee4 <sbrk_aligned+0x38>
 8000ed4:	1a21      	subs	r1, r4, r0
 8000ed6:	4628      	mov	r0, r5
 8000ed8:	f000 f87c 	bl	8000fd4 <_sbrk_r>
 8000edc:	3001      	adds	r0, #1
 8000ede:	d101      	bne.n	8000ee4 <sbrk_aligned+0x38>
 8000ee0:	f04f 34ff 	mov.w	r4, #4294967295
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	bd70      	pop	{r4, r5, r6, pc}
 8000ee8:	200000d0 	.word	0x200000d0

08000eec <_malloc_r>:
 8000eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ef0:	1ccd      	adds	r5, r1, #3
 8000ef2:	f025 0503 	bic.w	r5, r5, #3
 8000ef6:	3508      	adds	r5, #8
 8000ef8:	2d0c      	cmp	r5, #12
 8000efa:	bf38      	it	cc
 8000efc:	250c      	movcc	r5, #12
 8000efe:	2d00      	cmp	r5, #0
 8000f00:	4607      	mov	r7, r0
 8000f02:	db01      	blt.n	8000f08 <_malloc_r+0x1c>
 8000f04:	42a9      	cmp	r1, r5
 8000f06:	d905      	bls.n	8000f14 <_malloc_r+0x28>
 8000f08:	230c      	movs	r3, #12
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	2600      	movs	r6, #0
 8000f0e:	4630      	mov	r0, r6
 8000f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f14:	4e2e      	ldr	r6, [pc, #184]	; (8000fd0 <_malloc_r+0xe4>)
 8000f16:	f000 f907 	bl	8001128 <__malloc_lock>
 8000f1a:	6833      	ldr	r3, [r6, #0]
 8000f1c:	461c      	mov	r4, r3
 8000f1e:	bb34      	cbnz	r4, 8000f6e <_malloc_r+0x82>
 8000f20:	4629      	mov	r1, r5
 8000f22:	4638      	mov	r0, r7
 8000f24:	f7ff ffc2 	bl	8000eac <sbrk_aligned>
 8000f28:	1c43      	adds	r3, r0, #1
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	d14d      	bne.n	8000fca <_malloc_r+0xde>
 8000f2e:	6834      	ldr	r4, [r6, #0]
 8000f30:	4626      	mov	r6, r4
 8000f32:	2e00      	cmp	r6, #0
 8000f34:	d140      	bne.n	8000fb8 <_malloc_r+0xcc>
 8000f36:	6823      	ldr	r3, [r4, #0]
 8000f38:	4631      	mov	r1, r6
 8000f3a:	4638      	mov	r0, r7
 8000f3c:	eb04 0803 	add.w	r8, r4, r3
 8000f40:	f000 f848 	bl	8000fd4 <_sbrk_r>
 8000f44:	4580      	cmp	r8, r0
 8000f46:	d13a      	bne.n	8000fbe <_malloc_r+0xd2>
 8000f48:	6821      	ldr	r1, [r4, #0]
 8000f4a:	3503      	adds	r5, #3
 8000f4c:	1a6d      	subs	r5, r5, r1
 8000f4e:	f025 0503 	bic.w	r5, r5, #3
 8000f52:	3508      	adds	r5, #8
 8000f54:	2d0c      	cmp	r5, #12
 8000f56:	bf38      	it	cc
 8000f58:	250c      	movcc	r5, #12
 8000f5a:	4629      	mov	r1, r5
 8000f5c:	4638      	mov	r0, r7
 8000f5e:	f7ff ffa5 	bl	8000eac <sbrk_aligned>
 8000f62:	3001      	adds	r0, #1
 8000f64:	d02b      	beq.n	8000fbe <_malloc_r+0xd2>
 8000f66:	6823      	ldr	r3, [r4, #0]
 8000f68:	442b      	add	r3, r5
 8000f6a:	6023      	str	r3, [r4, #0]
 8000f6c:	e00e      	b.n	8000f8c <_malloc_r+0xa0>
 8000f6e:	6822      	ldr	r2, [r4, #0]
 8000f70:	1b52      	subs	r2, r2, r5
 8000f72:	d41e      	bmi.n	8000fb2 <_malloc_r+0xc6>
 8000f74:	2a0b      	cmp	r2, #11
 8000f76:	d916      	bls.n	8000fa6 <_malloc_r+0xba>
 8000f78:	1961      	adds	r1, r4, r5
 8000f7a:	42a3      	cmp	r3, r4
 8000f7c:	6025      	str	r5, [r4, #0]
 8000f7e:	bf18      	it	ne
 8000f80:	6059      	strne	r1, [r3, #4]
 8000f82:	6863      	ldr	r3, [r4, #4]
 8000f84:	bf08      	it	eq
 8000f86:	6031      	streq	r1, [r6, #0]
 8000f88:	5162      	str	r2, [r4, r5]
 8000f8a:	604b      	str	r3, [r1, #4]
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	f104 060b 	add.w	r6, r4, #11
 8000f92:	f000 f8cf 	bl	8001134 <__malloc_unlock>
 8000f96:	f026 0607 	bic.w	r6, r6, #7
 8000f9a:	1d23      	adds	r3, r4, #4
 8000f9c:	1af2      	subs	r2, r6, r3
 8000f9e:	d0b6      	beq.n	8000f0e <_malloc_r+0x22>
 8000fa0:	1b9b      	subs	r3, r3, r6
 8000fa2:	50a3      	str	r3, [r4, r2]
 8000fa4:	e7b3      	b.n	8000f0e <_malloc_r+0x22>
 8000fa6:	6862      	ldr	r2, [r4, #4]
 8000fa8:	42a3      	cmp	r3, r4
 8000faa:	bf0c      	ite	eq
 8000fac:	6032      	streq	r2, [r6, #0]
 8000fae:	605a      	strne	r2, [r3, #4]
 8000fb0:	e7ec      	b.n	8000f8c <_malloc_r+0xa0>
 8000fb2:	4623      	mov	r3, r4
 8000fb4:	6864      	ldr	r4, [r4, #4]
 8000fb6:	e7b2      	b.n	8000f1e <_malloc_r+0x32>
 8000fb8:	4634      	mov	r4, r6
 8000fba:	6876      	ldr	r6, [r6, #4]
 8000fbc:	e7b9      	b.n	8000f32 <_malloc_r+0x46>
 8000fbe:	230c      	movs	r3, #12
 8000fc0:	603b      	str	r3, [r7, #0]
 8000fc2:	4638      	mov	r0, r7
 8000fc4:	f000 f8b6 	bl	8001134 <__malloc_unlock>
 8000fc8:	e7a1      	b.n	8000f0e <_malloc_r+0x22>
 8000fca:	6025      	str	r5, [r4, #0]
 8000fcc:	e7de      	b.n	8000f8c <_malloc_r+0xa0>
 8000fce:	bf00      	nop
 8000fd0:	200000cc 	.word	0x200000cc

08000fd4 <_sbrk_r>:
 8000fd4:	b538      	push	{r3, r4, r5, lr}
 8000fd6:	4d06      	ldr	r5, [pc, #24]	; (8000ff0 <_sbrk_r+0x1c>)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	4604      	mov	r4, r0
 8000fdc:	4608      	mov	r0, r1
 8000fde:	602b      	str	r3, [r5, #0]
 8000fe0:	f7ff fb36 	bl	8000650 <_sbrk>
 8000fe4:	1c43      	adds	r3, r0, #1
 8000fe6:	d102      	bne.n	8000fee <_sbrk_r+0x1a>
 8000fe8:	682b      	ldr	r3, [r5, #0]
 8000fea:	b103      	cbz	r3, 8000fee <_sbrk_r+0x1a>
 8000fec:	6023      	str	r3, [r4, #0]
 8000fee:	bd38      	pop	{r3, r4, r5, pc}
 8000ff0:	200000d4 	.word	0x200000d4

08000ff4 <__sread>:
 8000ff4:	b510      	push	{r4, lr}
 8000ff6:	460c      	mov	r4, r1
 8000ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ffc:	f000 f8a0 	bl	8001140 <_read_r>
 8001000:	2800      	cmp	r0, #0
 8001002:	bfab      	itete	ge
 8001004:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001006:	89a3      	ldrhlt	r3, [r4, #12]
 8001008:	181b      	addge	r3, r3, r0
 800100a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800100e:	bfac      	ite	ge
 8001010:	6563      	strge	r3, [r4, #84]	; 0x54
 8001012:	81a3      	strhlt	r3, [r4, #12]
 8001014:	bd10      	pop	{r4, pc}

08001016 <__swrite>:
 8001016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800101a:	461f      	mov	r7, r3
 800101c:	898b      	ldrh	r3, [r1, #12]
 800101e:	05db      	lsls	r3, r3, #23
 8001020:	4605      	mov	r5, r0
 8001022:	460c      	mov	r4, r1
 8001024:	4616      	mov	r6, r2
 8001026:	d505      	bpl.n	8001034 <__swrite+0x1e>
 8001028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800102c:	2302      	movs	r3, #2
 800102e:	2200      	movs	r2, #0
 8001030:	f000 f868 	bl	8001104 <_lseek_r>
 8001034:	89a3      	ldrh	r3, [r4, #12]
 8001036:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800103a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800103e:	81a3      	strh	r3, [r4, #12]
 8001040:	4632      	mov	r2, r6
 8001042:	463b      	mov	r3, r7
 8001044:	4628      	mov	r0, r5
 8001046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800104a:	f000 b817 	b.w	800107c <_write_r>

0800104e <__sseek>:
 800104e:	b510      	push	{r4, lr}
 8001050:	460c      	mov	r4, r1
 8001052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001056:	f000 f855 	bl	8001104 <_lseek_r>
 800105a:	1c43      	adds	r3, r0, #1
 800105c:	89a3      	ldrh	r3, [r4, #12]
 800105e:	bf15      	itete	ne
 8001060:	6560      	strne	r0, [r4, #84]	; 0x54
 8001062:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001066:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800106a:	81a3      	strheq	r3, [r4, #12]
 800106c:	bf18      	it	ne
 800106e:	81a3      	strhne	r3, [r4, #12]
 8001070:	bd10      	pop	{r4, pc}

08001072 <__sclose>:
 8001072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001076:	f000 b813 	b.w	80010a0 <_close_r>
	...

0800107c <_write_r>:
 800107c:	b538      	push	{r3, r4, r5, lr}
 800107e:	4d07      	ldr	r5, [pc, #28]	; (800109c <_write_r+0x20>)
 8001080:	4604      	mov	r4, r0
 8001082:	4608      	mov	r0, r1
 8001084:	4611      	mov	r1, r2
 8001086:	2200      	movs	r2, #0
 8001088:	602a      	str	r2, [r5, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	f7ff fa93 	bl	80005b6 <_write>
 8001090:	1c43      	adds	r3, r0, #1
 8001092:	d102      	bne.n	800109a <_write_r+0x1e>
 8001094:	682b      	ldr	r3, [r5, #0]
 8001096:	b103      	cbz	r3, 800109a <_write_r+0x1e>
 8001098:	6023      	str	r3, [r4, #0]
 800109a:	bd38      	pop	{r3, r4, r5, pc}
 800109c:	200000d4 	.word	0x200000d4

080010a0 <_close_r>:
 80010a0:	b538      	push	{r3, r4, r5, lr}
 80010a2:	4d06      	ldr	r5, [pc, #24]	; (80010bc <_close_r+0x1c>)
 80010a4:	2300      	movs	r3, #0
 80010a6:	4604      	mov	r4, r0
 80010a8:	4608      	mov	r0, r1
 80010aa:	602b      	str	r3, [r5, #0]
 80010ac:	f7ff fa9f 	bl	80005ee <_close>
 80010b0:	1c43      	adds	r3, r0, #1
 80010b2:	d102      	bne.n	80010ba <_close_r+0x1a>
 80010b4:	682b      	ldr	r3, [r5, #0]
 80010b6:	b103      	cbz	r3, 80010ba <_close_r+0x1a>
 80010b8:	6023      	str	r3, [r4, #0]
 80010ba:	bd38      	pop	{r3, r4, r5, pc}
 80010bc:	200000d4 	.word	0x200000d4

080010c0 <_fstat_r>:
 80010c0:	b538      	push	{r3, r4, r5, lr}
 80010c2:	4d07      	ldr	r5, [pc, #28]	; (80010e0 <_fstat_r+0x20>)
 80010c4:	2300      	movs	r3, #0
 80010c6:	4604      	mov	r4, r0
 80010c8:	4608      	mov	r0, r1
 80010ca:	4611      	mov	r1, r2
 80010cc:	602b      	str	r3, [r5, #0]
 80010ce:	f7ff fa99 	bl	8000604 <_fstat>
 80010d2:	1c43      	adds	r3, r0, #1
 80010d4:	d102      	bne.n	80010dc <_fstat_r+0x1c>
 80010d6:	682b      	ldr	r3, [r5, #0]
 80010d8:	b103      	cbz	r3, 80010dc <_fstat_r+0x1c>
 80010da:	6023      	str	r3, [r4, #0]
 80010dc:	bd38      	pop	{r3, r4, r5, pc}
 80010de:	bf00      	nop
 80010e0:	200000d4 	.word	0x200000d4

080010e4 <_isatty_r>:
 80010e4:	b538      	push	{r3, r4, r5, lr}
 80010e6:	4d06      	ldr	r5, [pc, #24]	; (8001100 <_isatty_r+0x1c>)
 80010e8:	2300      	movs	r3, #0
 80010ea:	4604      	mov	r4, r0
 80010ec:	4608      	mov	r0, r1
 80010ee:	602b      	str	r3, [r5, #0]
 80010f0:	f7ff fa97 	bl	8000622 <_isatty>
 80010f4:	1c43      	adds	r3, r0, #1
 80010f6:	d102      	bne.n	80010fe <_isatty_r+0x1a>
 80010f8:	682b      	ldr	r3, [r5, #0]
 80010fa:	b103      	cbz	r3, 80010fe <_isatty_r+0x1a>
 80010fc:	6023      	str	r3, [r4, #0]
 80010fe:	bd38      	pop	{r3, r4, r5, pc}
 8001100:	200000d4 	.word	0x200000d4

08001104 <_lseek_r>:
 8001104:	b538      	push	{r3, r4, r5, lr}
 8001106:	4d07      	ldr	r5, [pc, #28]	; (8001124 <_lseek_r+0x20>)
 8001108:	4604      	mov	r4, r0
 800110a:	4608      	mov	r0, r1
 800110c:	4611      	mov	r1, r2
 800110e:	2200      	movs	r2, #0
 8001110:	602a      	str	r2, [r5, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	f7ff fa8f 	bl	8000636 <_lseek>
 8001118:	1c43      	adds	r3, r0, #1
 800111a:	d102      	bne.n	8001122 <_lseek_r+0x1e>
 800111c:	682b      	ldr	r3, [r5, #0]
 800111e:	b103      	cbz	r3, 8001122 <_lseek_r+0x1e>
 8001120:	6023      	str	r3, [r4, #0]
 8001122:	bd38      	pop	{r3, r4, r5, pc}
 8001124:	200000d4 	.word	0x200000d4

08001128 <__malloc_lock>:
 8001128:	4801      	ldr	r0, [pc, #4]	; (8001130 <__malloc_lock+0x8>)
 800112a:	f7ff be0d 	b.w	8000d48 <__retarget_lock_acquire_recursive>
 800112e:	bf00      	nop
 8001130:	200000c8 	.word	0x200000c8

08001134 <__malloc_unlock>:
 8001134:	4801      	ldr	r0, [pc, #4]	; (800113c <__malloc_unlock+0x8>)
 8001136:	f7ff be08 	b.w	8000d4a <__retarget_lock_release_recursive>
 800113a:	bf00      	nop
 800113c:	200000c8 	.word	0x200000c8

08001140 <_read_r>:
 8001140:	b538      	push	{r3, r4, r5, lr}
 8001142:	4d07      	ldr	r5, [pc, #28]	; (8001160 <_read_r+0x20>)
 8001144:	4604      	mov	r4, r0
 8001146:	4608      	mov	r0, r1
 8001148:	4611      	mov	r1, r2
 800114a:	2200      	movs	r2, #0
 800114c:	602a      	str	r2, [r5, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	f7ff fa14 	bl	800057c <_read>
 8001154:	1c43      	adds	r3, r0, #1
 8001156:	d102      	bne.n	800115e <_read_r+0x1e>
 8001158:	682b      	ldr	r3, [r5, #0]
 800115a:	b103      	cbz	r3, 800115e <_read_r+0x1e>
 800115c:	6023      	str	r3, [r4, #0]
 800115e:	bd38      	pop	{r3, r4, r5, pc}
 8001160:	200000d4 	.word	0x200000d4

08001164 <_init>:
 8001164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001166:	bf00      	nop
 8001168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800116a:	bc08      	pop	{r3}
 800116c:	469e      	mov	lr, r3
 800116e:	4770      	bx	lr

08001170 <_fini>:
 8001170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001172:	bf00      	nop
 8001174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001176:	bc08      	pop	{r3}
 8001178:	469e      	mov	lr, r3
 800117a:	4770      	bx	lr
